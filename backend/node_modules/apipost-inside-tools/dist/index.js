'use strict';

var Atools = require('apipost-tools');
var JSON5 = require('json5');
var lodash = require('lodash');
var uuid = require('uuid');
var csvToJson = require('csvtojson');
var urlParse = require('url-parse');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Atools__default = /*#__PURE__*/_interopDefaultLegacy(Atools);
var JSON5__default = /*#__PURE__*/_interopDefaultLegacy(JSON5);
var csvToJson__default = /*#__PURE__*/_interopDefaultLegacy(csvToJson);
var urlParse__default = /*#__PURE__*/_interopDefaultLegacy(urlParse);

var SYSTEM_FIELD_TYLES = ['类型', 'Array',
    'Boolean',
    'Date',
    'Function',
    'NaN',
    'Number',
    'Integer',
    'Object',
    'RegExp',
    'String',
    'Undefined', 'File']; // 字段类型
var getVarType = function (data) {
    var type = 'Any';
    var isFuc = {
        Array: lodash.isArray,
        Boolean: lodash.isBoolean,
        Date: lodash.isDate,
        Function: lodash.isFunction,
        NaN: isNaN,
        Number: lodash.isNumber,
        Integer: lodash.isInteger,
        Object: lodash.isObject,
        RegExp: lodash.isRegExp,
        String: lodash.isString,
        Undefined: lodash.isUndefined,
        Null: lodash.isNull,
    };
    SYSTEM_FIELD_TYLES.forEach(function (t) {
        if (isFuc.hasOwnProperty(t) && isFuc[t](data)) {
            type = t;
        }
    });
    return type;
};
// 导入json至请求区
var import2array = function (str, type) {
    if (type === void 0) { type = ''; }
    var returnList = [];
    var jsonObj;
    if (Atools.isJson(str) || Atools.isJson5(str)) {
        try {
            jsonObj = JSON5__default["default"].parse(str);
        }
        catch (error) {
            jsonObj = JSON.parse(str);
        }
        if (jsonObj instanceof Array) {
            for (var _i = 0, jsonObj_1 = jsonObj; _i < jsonObj_1.length; _i++) {
                var i = jsonObj_1[_i];
                if (i.hasOwnProperty('key') && i.key && i.key != 'undefined') {
                    var value = '';
                    if (lodash.isObject(i === null || i === void 0 ? void 0 : i.value)) {
                        value = JSON.stringify(i.value || '');
                    }
                    else {
                        value = String((i === null || i === void 0 ? void 0 : i.value) || '');
                    }
                    returnList.push({
                        description: (i === null || i === void 0 ? void 0 : i.description) || '',
                        is_checked: i.hasOwnProperty('is_checked') && i.is_checked <= 0 ? -1 : 1,
                        key: (i === null || i === void 0 ? void 0 : i.key) || '',
                        type: i.hasOwnProperty('type') && i.type == 'File' ? 'File' : 'Text',
                        not_null: i.hasOwnProperty('not_null') && i.not_null == -1 ? -1 : 1,
                        field_type: (i === null || i === void 0 ? void 0 : i.field_type) && SYSTEM_FIELD_TYLES.includes(i.field_type) ? i.field_type : (getVarType(value) || 'Text'),
                        value: type == 'query' ? encodeURIComponent(String(value) || '') : String(value) || '',
                    });
                }
            }
        }
        else {
            for (var key in jsonObj) {
                var value = '';
                if (lodash.isObject(jsonObj[key])) {
                    value = JSON.stringify(jsonObj[key] || '');
                }
                else {
                    value = String(jsonObj[key]);
                }
                if (key && key != '') {
                    returnList.push({
                        description: '',
                        is_checked: 1,
                        key: String(key),
                        type: 'Text',
                        not_null: 1,
                        field_type: getVarType(value) || 'Text',
                        value: type == 'query'
                            ? encodeURIComponent(String(value)) : String(value),
                    });
                }
            }
        }
    }
    else {
        jsonObj = str.split(/((\r\n)|[\r\n])+/gi);
        for (var x in jsonObj) {
            if (typeof jsonObj[x] === 'string' && jsonObj[x].length > 0) {
                var pos = jsonObj[x].indexOf(':');
                var kv = jsonObj[x].split(':');
                var key = "".concat(kv[0]).trim();
                var value = "".concat(jsonObj[x].substr(pos + 1)).trim();
                if (Atools__default["default"].isJson(value)) {
                    value = JSON.stringify(JSON.parse(value));
                }
                if (key && key.length > 0) {
                    returnList.push({
                        description: '',
                        is_checked: 1,
                        key: key,
                        type: 'Text',
                        not_null: 1,
                        field_type: getVarType(value) || 'Text',
                        value: type == 'query'
                            ? encodeURIComponent(value) : value,
                    });
                }
            }
        }
    }
    return returnList;
};

// apipost参数导出为String
var export2str = function (apipostArr, type) {
    if (type === void 0) { type = 'key-value'; }
    try {
        var arr = [];
        var obj_1 = {};
        var str_1 = '';
        if (apipostArr instanceof Array) {
            switch (type) {
                case 'json':
                    apipostArr.forEach(function (item) {
                        if (item.hasOwnProperty('key') && item.key)
                            obj_1[String(item.key)] = String((item === null || item === void 0 ? void 0 : item.value) || '');
                    });
                    str_1 = JSON.stringify(obj_1, null, '\t');
                    break;
                case 'json-desc':
                    arr = apipostArr.filter(function (item) { return item.hasOwnProperty('key') && item.key; });
                    str_1 = JSON.stringify(arr, null, '\t');
                    break;
                case 'key-value':
                    apipostArr.forEach(function (item) {
                        if (item.hasOwnProperty('key') && item.key)
                            str_1 += "".concat(item.key, ":").concat((item === null || item === void 0 ? void 0 : item.value) || '', "\n");
                    });
                    break;
                default:
                    break;
            }
        }
        return str_1;
    }
    catch (error) {
        return '';
    }
};

var objectArr2uniqueArr = function (arr) {
    var uniques = [];
    var stringify = {};
    if (arr instanceof Array) {
        for (var i = 0; i < arr.length; i++) {
            var keys = Object.keys(arr[i]);
            keys.sort(function (a, b) { return (Number(a) - Number(b)); });
            var str = '';
            for (var j = 0; j < keys.length; j++) {
                str += JSON.stringify(keys[j]);
                str += JSON.stringify(arr[i][keys[j]]);
            }
            // eslint-disable-next-line no-prototype-builtins
            if (!stringify.hasOwnProperty(str)) {
                uniques.push(arr[i]);
                stringify[str] = true;
            }
        }
    }
    // uniques = uniques;
    return uniques;
};

// 导入json至请求区
var importdesc2array = function (str, type) {
    var returnList = [];
    var jsonObj;
    if (!Atools__default["default"].isJson(str)) {
        jsonObj = str.split(/((\r\n)|[\r\n])+/gi);
        for (var x in jsonObj) {
            if (typeof jsonObj[x] === 'string' && jsonObj[x].length > 0) {
                var pos = jsonObj[x].indexOf(':');
                var kv = jsonObj[x].split(':');
                var key = "".concat(kv[0]).trim();
                var description = "".concat(jsonObj[x].substr(pos + 1)).trim();
                if (Atools__default["default"].isJson(description)) {
                    description = JSON.stringify(description);
                }
                if (key && key.length > 0) {
                    returnList.push({
                        key: key,
                        description: description
                    });
                }
            }
        }
    }
    else {
        jsonObj = JSON.parse(str);
        if (jsonObj instanceof Array) ;
        else {
            for (var key in jsonObj) {
                var description = jsonObj[key] || '';
                if (lodash.isObject(description)) {
                    description = JSON.stringify(description);
                }
                if (key && key != '') {
                    returnList.push({
                        description: String(description),
                        key: key
                    });
                }
            }
        }
    }
    return returnList;
};

// apipost参数导出为String
var exportdesc2str = function (apipostArr, type) {
    if (type === void 0) { type = 'key-value'; }
    try {
        var arr = [];
        var obj_1 = {};
        var str_1 = '';
        if (apipostArr instanceof Array) {
            switch (type) {
                case 'json':
                    apipostArr.forEach(function (item) {
                        if (item.hasOwnProperty('key') && item.key)
                            obj_1[String(item.key)] = String((item === null || item === void 0 ? void 0 : item.description) || '');
                    });
                    str_1 = JSON.stringify(obj_1, null, '\t');
                    break;
                case 'key-value':
                    apipostArr.forEach(function (item) {
                        if (item.hasOwnProperty('key') && item.key)
                            str_1 += "".concat(item.key, ":").concat((item === null || item === void 0 ? void 0 : item.description) || '', "\n");
                    });
                    break;
                default:
                    break;
            }
        }
        return str_1;
    }
    catch (error) {
        return '';
    }
};

var MODE$2 = {
    none: 'none',
    'multipart/form-data': 'form-data',
    'application/x-www-form-urlencoded': 'urlencoded',
    'application/json': 'json',
    'application/xml': 'xml',
    'application/javascript': 'javascript',
    'text/plain': 'plain',
    'text/html': 'html',
};
var har2apipost = function (har) {
    var _a;
    try {
        var api = {
            name: '新建接口',
            request: {
                auth: {
                    type: 'noauth',
                    kv: {
                        key: '',
                        value: '',
                    },
                    bearer: {
                        key: ''
                    },
                    basic: {
                        username: '',
                        password: ''
                    },
                    digest: {
                        username: '',
                        password: '',
                        realm: '',
                        nonce: '',
                        algorithm: '',
                        qop: '',
                        nc: '',
                        cnonce: '',
                        opaque: '',
                    },
                    hawk: {
                        authId: '',
                        authKey: '',
                        algorithm: '',
                        user: '',
                        nonce: '',
                        extraData: '',
                        app: '',
                        delegation: '',
                        timestamp: '',
                        includePayloadHash: -1,
                    },
                    awsv4: {
                        accessKey: '',
                        secretKey: '',
                        region: '',
                        service: '',
                        sessionToken: '',
                        addAuthDataToQuery: -1,
                    },
                    ntlm: {
                        username: '',
                        password: '',
                        domain: '',
                        workstation: '',
                        disableRetryRequest: 1,
                    },
                    edgegrid: {
                        accessToken: '',
                        clientToken: '',
                        clientSecret: '',
                        nonce: '',
                        timestamp: '',
                        baseURi: '',
                        headersToSign: '',
                    },
                    oauth1: {
                        consumerKey: '',
                        consumerSecret: '',
                        signatureMethod: '',
                        addEmptyParamsToSign: -1,
                        includeBodyHash: -1,
                        addParamsToHeader: -1,
                        realm: '',
                        version: '1.0',
                        nonce: '',
                        timestamp: '',
                        verifier: '',
                        callback: '',
                        tokenSecret: '',
                        token: '',
                    },
                },
                body: {
                    mode: 'none',
                    parameter: [],
                    raw: '',
                    raw_para: []
                },
                cookie: {
                    parameter: []
                },
                description: (har === null || har === void 0 ? void 0 : har.comment) || '',
                event: {
                    pre_script: '',
                    test: ''
                },
                header: {
                    parameter: []
                },
                query: {
                    parameter: []
                },
                resful: {
                    parameter: []
                },
                url: (har === null || har === void 0 ? void 0 : har.url) || ''
            },
            update_day: parseInt(String(new Date(new Date().toLocaleDateString()).getTime() / 1000), 10),
            update_dtime: Date.parse(String(new Date())) / 1000,
            create_dtime: Date.parse(String(new Date())) / 1000,
            is_changed: -1,
            mark: 'developing',
            method: (har === null || har === void 0 ? void 0 : har.method) || 'GET',
            parent_id: '0',
            project_id: '-1',
            sort: -1,
            target_id: uuid.v4(),
            type_sort: '1',
            version: 1,
            target_type: 'api',
            response: {
                success: {
                    parameter: [],
                    raw: ''
                },
                error: {
                    parameter: [],
                    raw: ''
                }
            },
            mock: '{}',
            mock_url: '',
            url: (har === null || har === void 0 ? void 0 : har.url) || ''
        };
        var request = api.request;
        if (har.hasOwnProperty('headers') && har.headers instanceof Array) {
            for (var _i = 0, _b = har.headers; _i < _b.length; _i++) {
                var header = _b[_i];
                (header === null || header === void 0 ? void 0 : header.name) && request.header.parameter.push({
                    is_checked: "1",
                    type: 'Text',
                    key: (header === null || header === void 0 ? void 0 : header.name) || '',
                    value: (header === null || header === void 0 ? void 0 : header.value) || "",
                    not_null: "1",
                    description: (header === null || header === void 0 ? void 0 : header.comment) || "",
                    field_type: "Text"
                });
            }
        }
        if (har.hasOwnProperty('queryString') && har.queryString instanceof Array) {
            for (var _c = 0, _d = har.queryString; _c < _d.length; _c++) {
                var query = _d[_c];
                (query === null || query === void 0 ? void 0 : query.name) && request.query.parameter.push({
                    is_checked: "1",
                    type: 'Text',
                    key: (query === null || query === void 0 ? void 0 : query.name) || '',
                    value: (query === null || query === void 0 ? void 0 : query.value) || "",
                    not_null: "1",
                    description: (query === null || query === void 0 ? void 0 : query.comment) || "",
                    field_type: "Text"
                });
            }
        }
        if (har.hasOwnProperty('postData') && har.postData instanceof Object) {
            if (har.postData.hasOwnProperty('mimeType')) {
                var apipostMode = MODE$2[har.postData.mimeType] || 'none';
                request.body.mode = apipostMode;
                request.body.raw = ((_a = har.postData) === null || _a === void 0 ? void 0 : _a.text) || '';
                if (har.postData.hasOwnProperty('params') && har.postData.params instanceof Array) {
                    for (var _e = 0, _f = har.postData.params; _e < _f.length; _e++) {
                        var param = _f[_e];
                        (param === null || param === void 0 ? void 0 : param.name) && request.body.parameter.push({
                            is_checked: "1",
                            type: param.hasOwnProperty('fileName') ? 'File' : 'Text',
                            key: (param === null || param === void 0 ? void 0 : param.name) || (param === null || param === void 0 ? void 0 : param.fileName) || '',
                            value: (param === null || param === void 0 ? void 0 : param.value) || (param === null || param === void 0 ? void 0 : param.fileName) || "",
                            not_null: "1",
                            description: (param === null || param === void 0 ? void 0 : param.comment) || "",
                            field_type: "Text"
                        });
                    }
                }
            }
        }
        return api;
    }
    catch (error) {
        return false;
    }
};

var DEFAULT_API_DATA = {
    name: '新建接口',
    ai_expect: {
        list: [],
        none_math_expect_id: '',
    },
    ai_expect_enable: -1,
    attribute_info: {},
    check_result_expectId: '',
    description: '',
    is_create: 1,
    is_changed: -1,
    is_force: -1,
    is_locked: -1,
    is_socket: 1,
    is_deleted: -1,
    is_conflicted: -1,
    mark_id: '1',
    method: 'GET',
    parent_id: '0',
    project_id: '-1',
    protocol: 'http/1.1',
    request: {
        auth: {
            type: 'inherit',
            kv: {
                key: '',
                value: '',
                in: 'header'
            },
            bearer: {
                key: '',
            },
            basic: {
                username: '',
                password: '',
            },
            digest: {
                username: '',
                password: '',
                realm: '',
                nonce: '',
                algorithm: 'MD5',
                qop: '',
                nc: '',
                cnonce: '',
                opaque: '',
                disableRetryRequest: false,
            },
            oauth1: {
                consumerKey: '',
                consumerSecret: '',
                signatureMethod: 'HMAC-SHA1',
                addEmptyParamsToSign: true,
                includeBodyHash: true,
                addParamsToHeader: false,
                realm: '',
                version: '1.0',
                nonce: '',
                timestamp: '',
                verifier: '',
                callback: '',
                tokenSecret: '',
                token: '',
                disableHeaderEncoding: false,
            },
            oauth2: {
                addTokenTo: 'header',
                headerPrefix: 'Bearer',
                access_token: '',
                grant_type: 'authorization_code',
                redirect_uri: '',
                authUrl: '',
                accessTokenUrl: '',
                clientId: '',
                clientSecret: '',
                username: '',
                password: '',
                challengeAlgorithm: 'S256',
                code_verifier: 'Bearer',
                scope: '',
                state: '',
                client_authentication: 'header',
                refreshTokenUrl: '',
                authRequestParams: [],
                tokenRequestParams: [],
                refreshRequestParams: [],
            },
            hawk: {
                authId: '',
                authKey: '',
                algorithm: '',
                user: '',
                nonce: '',
                extraData: '',
                app: '',
                delegation: '',
                timestamp: '',
                includePayloadHash: false,
            },
            awsv4: {
                accessKey: '',
                secretKey: '',
                region: '',
                service: '',
                sessionToken: '',
                addAuthDataToQuery: false,
            },
            ntlm: {
                username: '',
                password: '',
                domain: '',
                workstation: '',
                disableRetryRequest: false,
            },
            edgegrid: {
                accessToken: '',
                clientToken: '',
                clientSecret: '',
                nonce: '',
                timestamp: '',
                baseURi: '',
                headersToSign: '',
            },
            noauth: {},
            jwt: {
                addTokenTo: 'header',
                algorithm: 'HS256',
                secret: '',
                isSecretBase64Encoded: false,
                payload: '',
                headerPrefix: 'Bearer',
                queryParamKey: 'token',
                header: '',
            },
            asap: {
                alg: 'HS256',
                iss: '',
                aud: '',
                kid: '',
                privateKey: '',
                sub: '',
                claims: '',
                exp: '',
            }
        },
        body: {
            binary: null,
            mode: 'none',
            parameter: [],
            raw: '',
            raw_parameter: [],
            raw_schema: {
                type: 'object',
            },
        },
        cookie: {
            parameter: [],
        },
        header: {
            parameter: [],
        },
        post_tasks: [],
        pre_tasks: [],
        query: {
            parameter: [],
            query_add_equal: 1,
        },
        restful: {
            parameter: [],
        },
    },
    response: {
        example: [
            {
                example_id: '1',
                raw: '',
                raw_parameter: [],
                expect: {
                    name: '成功',
                    is_default: 1,
                    code: '200',
                    content_type: 'json',
                    verify_type: 'schema',
                    mock: '',
                    schema: {
                        type: 'object',
                        properties: {},
                    },
                },
            },
            {
                example_id: '2',
                raw: '',
                raw_parameter: [],
                expect: {
                    name: '失败',
                    is_default: -1,
                    code: '404',
                    content_type: 'json',
                    verify_type: 'schema',
                    mock: '',
                    schema: {
                        type: 'object',
                        properties: {},
                    },
                },
            },
        ],
        is_check_result: 1,
    },
    server_id: '0',
    sort: 0,
    status: 1,
    tags: [],
    target_id: '',
    target_type: 'api',
    url: '',
    version: 0,
};

var MODE$1 = {
    none: 'none',
    'multipart/form-data': 'form-data',
    'application/x-www-form-urlencoded': 'urlencoded',
    'application/json': 'json',
    'application/xml': 'xml',
    'application/javascript': 'javascript',
    'text/plain': 'plain',
    'text/html': 'html',
};
var har2apipostV8 = function (har) {
    var _a;
    try {
        var api = lodash.cloneDeep(DEFAULT_API_DATA);
        api.description = (har === null || har === void 0 ? void 0 : har.comment) || '';
        api.method = (har === null || har === void 0 ? void 0 : har.method) || 'GET';
        api.url = (har === null || har === void 0 ? void 0 : har.url) || '';
        api.target_id = Atools.snowflakeId();
        var request = api.request;
        if (har.hasOwnProperty('headers') && har.headers instanceof Array) {
            for (var _i = 0, _b = har.headers; _i < _b.length; _i++) {
                var header = _b[_i];
                (header === null || header === void 0 ? void 0 : header.name) &&
                    request.header.parameter.push({
                        is_checked: 1,
                        key: (header === null || header === void 0 ? void 0 : header.name) || '',
                        value: (header === null || header === void 0 ? void 0 : header.value) || '',
                        not_null: 1,
                        description: (header === null || header === void 0 ? void 0 : header.comment) || '',
                        field_type: 'String',
                        param_id: Atools.snowflakeId(),
                    });
            }
        }
        if (har.hasOwnProperty('queryString') && har.queryString instanceof Array) {
            for (var _c = 0, _d = har.queryString; _c < _d.length; _c++) {
                var query = _d[_c];
                (query === null || query === void 0 ? void 0 : query.name) &&
                    request.query.parameter.push({
                        is_checked: 1,
                        key: (query === null || query === void 0 ? void 0 : query.name) || '',
                        value: (query === null || query === void 0 ? void 0 : query.value) || '',
                        not_null: 1,
                        description: (query === null || query === void 0 ? void 0 : query.comment) || '',
                        field_type: 'String',
                        param_id: Atools.snowflakeId(),
                    });
            }
        }
        if (har.hasOwnProperty('postData') && har.postData instanceof Object) {
            if (har.postData.hasOwnProperty('mimeType')) {
                var apipostMode = MODE$1[har.postData.mimeType] || 'none';
                request.body.mode = apipostMode;
                request.body.raw = ((_a = har.postData) === null || _a === void 0 ? void 0 : _a.text) || '';
                if (har.postData.hasOwnProperty('params') && har.postData.params instanceof Array) {
                    for (var _e = 0, _f = har.postData.params; _e < _f.length; _e++) {
                        var param = _f[_e];
                        // FIXME param?.name 判断会导致一些字段不展示，有歧义，暂时去掉
                        // param?.name &&
                        request.body.parameter.push({
                            is_checked: 1,
                            key: (param === null || param === void 0 ? void 0 : param.name) || (param === null || param === void 0 ? void 0 : param.fileName) || '',
                            value: (param === null || param === void 0 ? void 0 : param.value) || (param === null || param === void 0 ? void 0 : param.fileName) || '',
                            not_null: 1,
                            description: (param === null || param === void 0 ? void 0 : param.comment) || '',
                            field_type: param.hasOwnProperty('fileName') ? 'File' : 'String',
                            param_id: Atools.snowflakeId(),
                        });
                    }
                }
            }
        }
        return api;
    }
    catch (error) {
        return false;
    }
};

var isElectron = function () { return !!(window && window.process && window.process.versions && window.process.versions['electron']); };

/**
 * 获取cookie
*/
var getCookie = function (name) {
    var cookieName = encodeURIComponent(name);
    /* 正则表达式获取cookie */
    var restr = "(^| )".concat(cookieName, "=([^;]*)(;|$)");
    var reg = new RegExp(restr);
    var cookieValue = '';
    var strcookie = document.cookie; // 获取cookie字符串
    var arrcookie = strcookie.split('; '); // 分割
    // 遍历匹配
    for (var i = 0; i < arrcookie.length; i++) {
        var arr = arrcookie[i].split('=');
        if (arr[0] == name && arr[1].length > 0) {
            return arr[1];
        }
    }
    if (document && document.hasOwnProperty('cookie')) {
        var match = document.cookie.match(reg);
        if (match && (match === null || match === void 0 ? void 0 : match.length) > 2) {
            cookieValue = match[2];
        }
    }
    return cookieValue;
};

/**
 * 设置cookie
*/
var setCookie = function (name, value, host, expiredays) {
    var exdate = new Date();
    var expiredaysnew = '';
    if (expiredays) {
        exdate.setDate(exdate.getDate() + expiredays);
        expiredaysnew = exdate.toUTCString();
    }
    else {
        expiredaysnew = '';
    }
    document.cookie = "".concat(name, "=").concat(escape(value), ";Path=/;").concat(host && "Domain=.".concat(host)).concat(expiredaysnew && ";Expires=".concat(expiredaysnew));
};

// 结果转换函数
var ConvertResult = function (status, message, data) {
    return {
        status: status,
        message: message,
        data: data
    };
};

// global function
var getCachePath = function () {
    var cache_path = process.env['TMPDIR'];
    if (!cache_path) {
        cache_path = process.env['LOCALAPPDATA'];
    }
    if (!cache_path) {
        cache_path = process.env['HOME'];
    }
    if (!cache_path) {
        cache_path = process.env['PWD'];
    }
    return cache_path;
};

var isXml = function (val) { return new DOMParser().parseFromString(val, 'text/xml').documentElement.nodeName !== 'html' && (val.substring(0, 1) === '<') && (val.charAt(val.length - 1) === '>'); };

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var defalutAuth = {
    kv: {
        key: '',
        value: '',
    },
    bearer: {
        key: '',
    },
    basic: {
        username: '',
        password: '',
    },
    digest: {
        username: '',
        password: '',
        realm: '',
        nonce: '',
        algorithm: '',
        qop: '',
        nc: '',
        cnonce: '',
        opaque: '',
    },
    hawk: {
        authId: '',
        authKey: '',
        algorithm: '',
        user: '',
        nonce: '',
        extraData: '',
        app: '',
        delegation: '',
        timestamp: '',
        includePayloadHash: -1,
    },
    awsv4: {
        accessKey: '',
        secretKey: '',
        region: '',
        service: '',
        sessionToken: '',
        addAuthDataToQuery: -1,
    },
    ntlm: {
        username: '',
        password: '',
        domain: '',
        workstation: '',
        disableRetryRequest: 1,
    },
    edgegrid: {
        accessToken: '',
        clientToken: '',
        clientSecret: '',
        nonce: '',
        timestamp: '',
        baseURi: '',
        headersToSign: '',
    },
    oauth1: {
        consumerKey: '',
        consumerSecret: '',
        signatureMethod: '',
        addEmptyParamsToSign: -1,
        includeBodyHash: -1,
        addParamsToHeader: -1,
        realm: '',
        version: '1.0',
        nonce: '',
        timestamp: '',
        verifier: '',
        callback: '',
        tokenSecret: '',
        token: '',
    },
};
var getSimpleData = function (data) {
    var _a, _b;
    var _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42;
    var SimpleData = {
        target_type: (data === null || data === void 0 ? void 0 : data.target_type) || 'api',
        name: (data === null || data === void 0 ? void 0 : data.name) || '',
        mark: (data === null || data === void 0 ? void 0 : data.mark) || 'developing',
        sort: (data === null || data === void 0 ? void 0 : data.sort) || 1,
    };
    switch (SimpleData.target_type) {
        case 'api':
            var apiObj = {
                method: (data === null || data === void 0 ? void 0 : data.method) || 'POST',
                mock: (data === null || data === void 0 ? void 0 : data.mock) || '{}',
                mock_url: (data === null || data === void 0 ? void 0 : data.mock_url) || '',
                request: {
                    url: ((_c = data === null || data === void 0 ? void 0 : data.request) === null || _c === void 0 ? void 0 : _c.url) || '',
                    description: ((_d = data === null || data === void 0 ? void 0 : data.request) === null || _d === void 0 ? void 0 : _d.description) || '',
                    event: ((_e = data === null || data === void 0 ? void 0 : data.request) === null || _e === void 0 ? void 0 : _e.event) || {},
                },
                response: (data === null || data === void 0 ? void 0 : data.response) || {},
            };
            SimpleData = __assign(__assign({}, SimpleData), apiObj);
            if (lodash.isPlainObject((_f = data === null || data === void 0 ? void 0 : data.reuqest) === null || _f === void 0 ? void 0 : _f.auth) && lodash.isString((_h = (_g = data === null || data === void 0 ? void 0 : data.reuqest) === null || _g === void 0 ? void 0 : _g.auth) === null || _h === void 0 ? void 0 : _h.type)) {
                if (defalutAuth.hasOwnProperty(data.reuqest.auth.type) && data.reuqest.auth.hasOwnProperty(data.reuqest.auth.type)) {
                    SimpleData.request.auth = (_a = {
                            type: data.reuqest.auth.type
                        },
                        _a[data.reuqest.auth.type] = __assign(__assign({}, defalutAuth[data.reuqest.auth.type]), data.reuqest.auth[data.reuqest.auth.type]),
                        _a);
                }
            }
            if (lodash.isPlainObject((_j = data === null || data === void 0 ? void 0 : data.request) === null || _j === void 0 ? void 0 : _j.body) && lodash.isString((_l = (_k = data === null || data === void 0 ? void 0 : data.request) === null || _k === void 0 ? void 0 : _k.body) === null || _l === void 0 ? void 0 : _l.mode) && ((_o = (_m = data === null || data === void 0 ? void 0 : data.request) === null || _m === void 0 ? void 0 : _m.body) === null || _o === void 0 ? void 0 : _o.mode) !== 'none') {
                SimpleData.request.body = (_p = data === null || data === void 0 ? void 0 : data.request) === null || _p === void 0 ? void 0 : _p.body;
            }
            if (lodash.isArray((_r = (_q = data === null || data === void 0 ? void 0 : data.request) === null || _q === void 0 ? void 0 : _q.header) === null || _r === void 0 ? void 0 : _r.parameter) && ((_t = (_s = data === null || data === void 0 ? void 0 : data.request) === null || _s === void 0 ? void 0 : _s.header) === null || _t === void 0 ? void 0 : _t.parameter.length) > 0) {
                SimpleData.request.header = (_u = data === null || data === void 0 ? void 0 : data.request) === null || _u === void 0 ? void 0 : _u.header;
            }
            if (lodash.isArray((_w = (_v = data === null || data === void 0 ? void 0 : data.request) === null || _v === void 0 ? void 0 : _v.query) === null || _w === void 0 ? void 0 : _w.parameter) && ((_y = (_x = data === null || data === void 0 ? void 0 : data.request) === null || _x === void 0 ? void 0 : _x.query) === null || _y === void 0 ? void 0 : _y.parameter.length) > 0) {
                SimpleData.request.query = (_z = data === null || data === void 0 ? void 0 : data.request) === null || _z === void 0 ? void 0 : _z.query;
            }
            if (lodash.isArray((_1 = (_0 = data === null || data === void 0 ? void 0 : data.request) === null || _0 === void 0 ? void 0 : _0.resful) === null || _1 === void 0 ? void 0 : _1.parameter) && ((_3 = (_2 = data === null || data === void 0 ? void 0 : data.request) === null || _2 === void 0 ? void 0 : _2.resful) === null || _3 === void 0 ? void 0 : _3.parameter.length) > 0) {
                SimpleData.request.resful = (_4 = data === null || data === void 0 ? void 0 : data.request) === null || _4 === void 0 ? void 0 : _4.resful;
            }
            if (lodash.isPlainObject((_5 = data === null || data === void 0 ? void 0 : data.request) === null || _5 === void 0 ? void 0 : _5.event)) {
                if ((lodash.isString((_6 = data === null || data === void 0 ? void 0 : data.script) === null || _6 === void 0 ? void 0 : _6.pre_script) && ((_7 = data.request.event) === null || _7 === void 0 ? void 0 : _7.pre_script.length) > 0) || (lodash.isString((_8 = data.request.event) === null || _8 === void 0 ? void 0 : _8.test) && ((_9 = data.request.event) === null || _9 === void 0 ? void 0 : _9.test.length) > 0)) {
                    SimpleData.request.event = (_10 = data === null || data === void 0 ? void 0 : data.request) === null || _10 === void 0 ? void 0 : _10.event;
                }
            }
            break;
        case 'folder':
            var folderObj = {
                request: {
                    description: ((_11 = data === null || data === void 0 ? void 0 : data.request) === null || _11 === void 0 ? void 0 : _11.description) || '',
                },
            };
            if (lodash.isPlainObject(data === null || data === void 0 ? void 0 : data.script)) {
                if ((lodash.isString((_12 = data === null || data === void 0 ? void 0 : data.script) === null || _12 === void 0 ? void 0 : _12.pre_script) && ((_13 = data === null || data === void 0 ? void 0 : data.script) === null || _13 === void 0 ? void 0 : _13.pre_script.length) > 0) || (lodash.isString((_14 = data === null || data === void 0 ? void 0 : data.script) === null || _14 === void 0 ? void 0 : _14.test) && ((_15 = data === null || data === void 0 ? void 0 : data.script) === null || _15 === void 0 ? void 0 : _15.test.length) > 0)) {
                    folderObj.script = (_16 = data === null || data === void 0 ? void 0 : data.request) === null || _16 === void 0 ? void 0 : _16.event;
                }
            }
            if (lodash.isArray((_17 = data === null || data === void 0 ? void 0 : data.request) === null || _17 === void 0 ? void 0 : _17.body) && ((_18 = data === null || data === void 0 ? void 0 : data.request) === null || _18 === void 0 ? void 0 : _18.body.length) > 0) {
                folderObj.request.body = (_19 = data === null || data === void 0 ? void 0 : data.request) === null || _19 === void 0 ? void 0 : _19.body;
            }
            if (lodash.isArray((_20 = data === null || data === void 0 ? void 0 : data.request) === null || _20 === void 0 ? void 0 : _20.header) && ((_21 = data === null || data === void 0 ? void 0 : data.request) === null || _21 === void 0 ? void 0 : _21.header.length) > 0) {
                folderObj.request.header = (_22 = data === null || data === void 0 ? void 0 : data.request) === null || _22 === void 0 ? void 0 : _22.header;
            }
            if (lodash.isArray((_23 = data === null || data === void 0 ? void 0 : data.request) === null || _23 === void 0 ? void 0 : _23.query) && ((_24 = data === null || data === void 0 ? void 0 : data.request) === null || _24 === void 0 ? void 0 : _24.query.length) > 0) {
                folderObj.request.query = (_25 = data === null || data === void 0 ? void 0 : data.request) === null || _25 === void 0 ? void 0 : _25.query;
            }
            if (lodash.isPlainObject((_26 = data === null || data === void 0 ? void 0 : data.reuqest) === null || _26 === void 0 ? void 0 : _26.auth) && lodash.isString((_28 = (_27 = data === null || data === void 0 ? void 0 : data.reuqest) === null || _27 === void 0 ? void 0 : _27.auth) === null || _28 === void 0 ? void 0 : _28.type)) {
                if (defalutAuth.hasOwnProperty(data.reuqest.auth.type) && data.reuqest.auth.hasOwnProperty(data.reuqest.auth.type)) {
                    folderObj.request.auth = (_b = {
                            type: data.reuqest.auth.type
                        },
                        _b[data.reuqest.auth.type] = __assign(__assign({}, defalutAuth[data.reuqest.auth.type]), data.reuqest.auth[data.reuqest.auth.type]),
                        _b);
                }
            }
            SimpleData = __assign(__assign({}, SimpleData), folderObj);
            break;
        case 'doc':
            var docObj = {
                request: {
                    description: ((_29 = data === null || data === void 0 ? void 0 : data.request) === null || _29 === void 0 ? void 0 : _29.description) || '',
                },
            };
            SimpleData = __assign(__assign({}, SimpleData), docObj);
            break;
        case 'grpc':
            var grpcObj = {
                protos: (data === null || data === void 0 ? void 0 : data.protos) || {},
                request: {
                    description: ((_30 = data === null || data === void 0 ? void 0 : data.request) === null || _30 === void 0 ? void 0 : _30.description) || '',
                },
            };
            SimpleData = __assign(__assign({}, SimpleData), grpcObj);
            break;
        case 'websocket':
            var websocketObj = {
                method: (data === null || data === void 0 ? void 0 : data.method) || 'Raw',
                request: {
                    url: ((_31 = data === null || data === void 0 ? void 0 : data.request) === null || _31 === void 0 ? void 0 : _31.url) || '',
                    description: ((_32 = data === null || data === void 0 ? void 0 : data.request) === null || _32 === void 0 ? void 0 : _32.description) || '',
                },
                message: (data === null || data === void 0 ? void 0 : data.message) || '',
                messageType: (data === null || data === void 0 ? void 0 : data.messageType) || 'Text', // 发送消息类型 Text/Json/Xml/Base64/Hexadecimal
            };
            if (lodash.isArray((_34 = (_33 = data === null || data === void 0 ? void 0 : data.request) === null || _33 === void 0 ? void 0 : _33.query) === null || _34 === void 0 ? void 0 : _34.parameter) && ((_36 = (_35 = data === null || data === void 0 ? void 0 : data.request) === null || _35 === void 0 ? void 0 : _35.query) === null || _36 === void 0 ? void 0 : _36.parameter.length) > 0) {
                websocketObj.request.query = (_37 = data === null || data === void 0 ? void 0 : data.request) === null || _37 === void 0 ? void 0 : _37.query;
            }
            if (lodash.isArray((_39 = (_38 = data === null || data === void 0 ? void 0 : data.request) === null || _38 === void 0 ? void 0 : _38.header) === null || _39 === void 0 ? void 0 : _39.parameter) && ((_41 = (_40 = data === null || data === void 0 ? void 0 : data.request) === null || _40 === void 0 ? void 0 : _40.header) === null || _41 === void 0 ? void 0 : _41.parameter.length) > 0) {
                websocketObj.request.header = (_42 = data === null || data === void 0 ? void 0 : data.request) === null || _42 === void 0 ? void 0 : _42.header;
            }
            if (lodash.isPlainObject(data === null || data === void 0 ? void 0 : data.socketConfig)) {
                websocketObj.socketConfig = data === null || data === void 0 ? void 0 : data.socketConfig;
            }
            SimpleData = __assign(__assign({}, SimpleData), websocketObj);
            break;
    }
    return SimpleData;
};
var array2TreeExport$1 = function (items, idName, pidName) {
    if (idName === void 0) { idName = 'id'; }
    if (pidName === void 0) { pidName = 'pid'; }
    try {
        var result = [];
        var itemMap = {};
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            var id = item[idName];
            var pid = item[pidName];
            if (!id || id == undefined) {
                continue;
            }
            if (!itemMap.hasOwnProperty(id)) {
                itemMap[id] = {
                    children: [],
                };
            }
            itemMap[id] = __assign(__assign({}, getSimpleData(item)), { children: itemMap[id]['children'] });
            var treeItem = itemMap[id];
            if (pid == 0 || pid == undefined) {
                result.push(treeItem);
            }
            else {
                if (!itemMap.hasOwnProperty(pid)) {
                    itemMap[pid] = {
                        children: [],
                    };
                }
                itemMap[pid].children.push(treeItem);
            }
        }
        return result;
    }
    catch (error) {
        return [];
    }
};
var handleProject$1 = function (exportApipostObj, project) {
    var _a;
    var _b = project || {}, name = _b.name, description = _b.description, details = _b.details;
    var _c = details || {}, script = _c.script, request = _c.request, markList = _c.markList, globalDescriptionVars = _c.globalDescriptionVars;
    var _d = request || {}, query = _d.query, header = _d.header, body = _d.body, auth = _d.auth;
    exportApipostObj.project.name = name || '新建项目';
    exportApipostObj.project.description = description || '';
    exportApipostObj.project.details = {};
    if (lodash.isArray(globalDescriptionVars)) {
        exportApipostObj.project.details.variable = globalDescriptionVars;
    }
    if (lodash.isArray(markList)) {
        exportApipostObj.project.details.markList = markList;
    }
    if (lodash.isPlainObject(script)) {
        exportApipostObj.project.details.script = {};
        if (lodash.isString(script === null || script === void 0 ? void 0 : script.pre_script)) {
            exportApipostObj.project.details.script.pre_script = script.pre_script;
        }
        if (lodash.isString(script === null || script === void 0 ? void 0 : script.test)) {
            exportApipostObj.project.details.script.test = script.test;
        }
    }
    var tempRequest = {};
    if (lodash.isArray(query)) {
        tempRequest.query = query;
    }
    if (lodash.isArray(header)) {
        tempRequest.header = header;
    }
    if (lodash.isArray(body)) {
        tempRequest.body = body;
    }
    if (lodash.isPlainObject(auth) && lodash.isString(auth === null || auth === void 0 ? void 0 : auth.type)) {
        if (defalutAuth.hasOwnProperty(auth.type) && auth.hasOwnProperty(auth.type)) {
            tempRequest.auth = (_a = {
                    type: auth.type
                },
                _a[auth.type] = __assign(__assign({}, defalutAuth[auth.type]), auth[auth.type]),
                _a);
        }
    }
    if (!lodash.isEmpty(tempRequest)) {
        exportApipostObj.project.details.request = tempRequest;
    }
};
var handleApis$1 = function (exportApipostObj, apis) {
    if (lodash.isArray(apis) && apis.length > 0) {
        exportApipostObj.apis = array2TreeExport$1(apis, 'target_id', 'parent_id') || [];
    }
};
var handleEnvs$1 = function (exportApipostObj, envs) {
    if (lodash.isArray(envs) && envs.length > 0) {
        exportApipostObj.envs = envs.map(function (item) {
            return {
                env_id: (item === null || item === void 0 ? void 0 : item.env_id) || '',
                list: lodash.isPlainObject(item === null || item === void 0 ? void 0 : item.list) ? item === null || item === void 0 ? void 0 : item.list : {},
                name: (item === null || item === void 0 ? void 0 : item.name) || '新建环境',
                pre_url: (item === null || item === void 0 ? void 0 : item.pre_url) || "",
            };
        });
    }
};
var apipost2exportApipost = function (apipostObj) {
    var exportApipostObj = {
        project: {},
        apis: [],
        envs: [],
    };
    try {
        var _a = apipostObj || {}, project = _a.project, apis = _a.apis, envs = _a.envs;
        // 处理项目信息
        handleProject$1(exportApipostObj, project);
        // 处理apis
        handleApis$1(exportApipostObj, apis);
        // 处理环境信息
        handleEnvs$1(exportApipostObj, envs);
        var result = Atools__default["default"].successResult(exportApipostObj);
        console.log("apipost2exportApipost", JSON.stringify(result, null, '\t'));
        return result;
    }
    catch (error) {
        Atools__default["default"].errorResult(String(error));
    }
};

var isJSON = function (str) {
    if (typeof str === 'string') {
        try {
            var obj = JSON.parse(str);
            if (typeof obj === 'object' && obj) {
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            return false;
        }
    }
    else {
        return false;
    }
};
// 字符串转测试对象
var str2testDataAsync = function (str) { return __awaiter(void 0, void 0, void 0, function () {
    var returnList, jsonObj;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 4, , 5]);
                returnList = [];
                jsonObj = void 0;
                if (!!isJSON(str)) return [3 /*break*/, 2];
                return [4 /*yield*/, csvToJson__default["default"]().fromString(str)];
            case 1:
                returnList = _a.sent();
                if (!lodash.isArray(returnList)) {
                    returnList = [];
                }
                return [3 /*break*/, 3];
            case 2:
                jsonObj = JSON.parse(str);
                if (jsonObj instanceof Array) {
                    returnList = jsonObj;
                }
                else {
                    returnList.push(jsonObj);
                }
                _a.label = 3;
            case 3: return [2 /*return*/, returnList];
            case 4:
                _a.sent();
                return [2 /*return*/, []];
            case 5: return [2 /*return*/];
        }
    });
}); };

var findSon = function (res, list, target_id) {
    if (res === void 0) { res = []; }
    if (list === void 0) { list = []; }
    if (target_id === void 0) { target_id = '-1'; }
    list.forEach(function (item) {
        if (target_id === item.parent_id) {
            res.push(item);
            findSon(res, list, item.target_id);
        }
    });
};
var recursiveFolderPath$1 = function (path, sourceObj, pid, pidName) {
    if (pidName === void 0) { pidName = 'pid'; }
    if (pid && sourceObj[pid]) {
        path = "".concat(sourceObj[pid].name, ".").concat(path);
        if (sourceObj[pid][pidName] && sourceObj[pid][pidName] != '0')
            return recursiveFolderPath$1(path, sourceObj, sourceObj[pid][pidName], pidName);
        return path;
    }
    return path;
};
var removeQuery$1 = function (url) {
    var path = url;
    try {
        var parts = url.split("?");
        path = parts[0];
    }
    catch (error) { }
    return path;
};
var array2NamePathObj$1 = function (items, newItems, idName, pidName) {
    var _a;
    if (idName === void 0) { idName = 'id'; }
    if (pidName === void 0) { pidName = 'pid'; }
    try {
        var result = {};
        var sourceObj_1 = {};
        items.forEach(function (item) {
            sourceObj_1[item[idName]] = item;
        });
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            var id = item[idName];
            var pid = item[pidName];
            if (!id || id == undefined) {
                continue;
            }
            if (item.target_type != 'folder') {
                var path = recursiveFolderPath$1("".concat(removeQuery$1((_a = item === null || item === void 0 ? void 0 : item.request) === null || _a === void 0 ? void 0 : _a.url), ".").concat(item === null || item === void 0 ? void 0 : item.method, ".").concat(item === null || item === void 0 ? void 0 : item.target_type), sourceObj_1, pid, pidName);
                item.path = path;
                if (!result.hasOwnProperty(path)) {
                    result[path] = [];
                }
                result[path].push(id);
            }
            else {
                var path = recursiveFolderPath$1("".concat(item === null || item === void 0 ? void 0 : item.name, ".").concat(item === null || item === void 0 ? void 0 : item.target_type), sourceObj_1, pid, pidName);
                item.path = path;
                if (!result.hasOwnProperty(path)) {
                    result[path] = [];
                }
                result[path].push(id);
            }
            newItems.push(item);
        }
        return result;
    }
    catch (error) {
        return {};
    }
};
var importSwaggerHandle = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var swaggerApis, localApis, auto_import_id, import_folder_id, import_project_id, cover_modal, handleCoverData, _a, checkImportId, folder_id, project_id, localArr, folderObj, newLocalArr, newApis, localPathObj, localDataObj_1, newApisDataObj_1, saveList_1, index, item, parent_1, localObjItem, _i, localObjItem_1, id, newobj, localObjItem, _b, localObjItem_2, id, pushObj, parent_2, delIds, normalList, normalImportIds_1, saveObj_1, newList_1, sortIds, lastIndex, secIndex;
    var _c;
    var _d, _e, _f, _g, _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                swaggerApis = data.swaggerApis, localApis = data.localApis, auto_import_id = data.auto_import_id, import_folder_id = data.import_folder_id, import_project_id = data.import_project_id, cover_modal = data.cover_modal, handleCoverData = data.handleCoverData, _a = data.checkImportId, checkImportId = _a === void 0 ? true : _a;
                debugger;
                folder_id = import_folder_id;
                project_id = import_project_id;
                localArr = localApis.filter(function (i) { return !i.hasOwnProperty('status') || i.status === '1' || i.status === 1; });
                folderObj = localApis.find(function (item) { return (item === null || item === void 0 ? void 0 : item.target_id) === folder_id; });
                // 从本地数据获取导入目录下的所有数据
                if (folder_id && folder_id !== '0' && lodash.isPlainObject(folderObj) && (folderObj === null || folderObj === void 0 ? void 0 : folderObj.status) == '1') {
                    newLocalArr = [];
                    findSon(newLocalArr, localArr, folder_id);
                    localArr = newLocalArr;
                }
                newApis = swaggerApis.map(function (item) {
                    item.project_id = project_id;
                    item.auto_import_id = auto_import_id;
                    return item;
                });
                // 导入数据添加path（path后续对比使用）
                array2NamePathObj$1(newApis, [], 'target_id', 'parent_id');
                localPathObj = array2NamePathObj$1(localArr, [], 'target_id', 'parent_id');
                if (!(cover_modal === 'url' ||
                    cover_modal === 'uniqueUrl' ||
                    cover_modal === 'bothUrl' ||
                    cover_modal === 'urlAndFolder')) return [3 /*break*/, 15];
                localDataObj_1 = {};
                newApisDataObj_1 = {};
                localArr.forEach(function (item) {
                    localDataObj_1[item === null || item === void 0 ? void 0 : item.target_id] = item;
                });
                newApis.forEach(function (element) {
                    newApisDataObj_1[element === null || element === void 0 ? void 0 : element.target_id] = element;
                });
                saveList_1 = [];
                index = 0;
                _j.label = 1;
            case 1:
                if (!(index < newApis.length)) return [3 /*break*/, 14];
                item = newApis[index];
                if ((item === null || item === void 0 ? void 0 : item.parent_id) == '0' && folder_id && folder_id !== '0') {
                    if (lodash.isPlainObject(folderObj) && (folderObj === null || folderObj === void 0 ? void 0 : folderObj.status) == '1') {
                        item.parent_id = folder_id;
                    }
                }
                if (!((item === null || item === void 0 ? void 0 : item.target_type) === 'folder')) return [3 /*break*/, 7];
                if (!!localPathObj.hasOwnProperty(item === null || item === void 0 ? void 0 : item.path)) return [3 /*break*/, 2];
                parent_1 = newApisDataObj_1[item === null || item === void 0 ? void 0 : item.parent_id];
                if (parent_1 && localPathObj.hasOwnProperty(parent_1 === null || parent_1 === void 0 ? void 0 : parent_1.path)) {
                    item.parent_id = localPathObj[parent_1 === null || parent_1 === void 0 ? void 0 : parent_1.path][0];
                } // 存在把 父id改掉
                saveList_1.push(__assign(__assign({}, item), { auto_import_id: auto_import_id }));
                return [3 /*break*/, 6];
            case 2:
                localObjItem = localPathObj[item === null || item === void 0 ? void 0 : item.path];
                if (!(lodash.isArray(localObjItem) && localObjItem.length > 0)) return [3 /*break*/, 6];
                _i = 0, localObjItem_1 = localObjItem;
                _j.label = 3;
            case 3:
                if (!(_i < localObjItem_1.length)) return [3 /*break*/, 6];
                id = localObjItem_1[_i];
                if (!lodash.isPlainObject(localDataObj_1[id])) {
                    return [3 /*break*/, 5];
                }
                if (!(!checkImportId || ((_d = localDataObj_1[id]) === null || _d === void 0 ? void 0 : _d.auto_import_id) === auto_import_id)) return [3 /*break*/, 5];
                return [4 /*yield*/, handleCoverData(item, localDataObj_1[id], cover_modal)];
            case 4:
                newobj = _j.sent();
                saveList_1.push(newobj);
                _j.label = 5;
            case 5:
                _i++;
                return [3 /*break*/, 3];
            case 6: return [3 /*break*/, 13];
            case 7:
                if (!localPathObj.hasOwnProperty(item === null || item === void 0 ? void 0 : item.path)) return [3 /*break*/, 12];
                localObjItem = localPathObj[item === null || item === void 0 ? void 0 : item.path];
                if (!(lodash.isArray(localObjItem) && localObjItem.length > 0)) return [3 /*break*/, 11];
                _b = 0, localObjItem_2 = localObjItem;
                _j.label = 8;
            case 8:
                if (!(_b < localObjItem_2.length)) return [3 /*break*/, 11];
                id = localObjItem_2[_b];
                if (!lodash.isPlainObject(localDataObj_1[id])) {
                    return [3 /*break*/, 10];
                }
                return [4 /*yield*/, handleCoverData(item, localDataObj_1[id], cover_modal)];
            case 9:
                pushObj = _j.sent();
                // 同url覆盖
                if (cover_modal === 'url') {
                    if (!checkImportId || ((_e = localDataObj_1[id]) === null || _e === void 0 ? void 0 : _e.auto_import_id) === auto_import_id) {
                        saveList_1.push(pushObj);
                    }
                }
                else if (cover_modal === 'uniqueUrl') {
                    console.log('不覆盖，直接跳过');
                    // 不覆盖，直接跳过
                    if (!checkImportId || ((_f = localDataObj_1[id]) === null || _f === void 0 ? void 0 : _f.auto_import_id) === auto_import_id) {
                        saveList_1.push(pushObj);
                    }
                }
                else if (cover_modal === 'bothUrl') {
                    // 保留二者
                    if (!checkImportId || ((_g = localDataObj_1[id]) === null || _g === void 0 ? void 0 : _g.auto_import_id) === auto_import_id) {
                        saveList_1.push(pushObj);
                        saveList_1.push(__assign(__assign({}, item), { parent_id: (pushObj === null || pushObj === void 0 ? void 0 : pushObj.parent_id) || '0' }));
                    }
                }
                else if (cover_modal === 'urlAndFolder') {
                    if (localDataObj_1.hasOwnProperty(id) &&
                        (!checkImportId || ((_h = localDataObj_1[id]) === null || _h === void 0 ? void 0 : _h.auto_import_id) === auto_import_id)) {
                        // 合并本地和导入的请求区数据
                        saveList_1.push(pushObj);
                    }
                }
                _j.label = 10;
            case 10:
                _b++;
                return [3 /*break*/, 8];
            case 11: return [3 /*break*/, 13];
            case 12:
                parent_2 = newApisDataObj_1[item === null || item === void 0 ? void 0 : item.parent_id];
                if (parent_2 &&
                    parent_2.hasOwnProperty('path') &&
                    !lodash.isUndefined(parent_2) &&
                    lodash.isPlainObject(parent_2) &&
                    localPathObj.hasOwnProperty(parent_2 === null || parent_2 === void 0 ? void 0 : parent_2.path)) {
                    item.parent_id = localPathObj[parent_2 === null || parent_2 === void 0 ? void 0 : parent_2.path][0]; // 存在把 父id改掉
                }
                saveList_1.push(__assign(__assign({}, item), { auto_import_id: auto_import_id }));
                _j.label = 13;
            case 13:
                index++;
                return [3 /*break*/, 1];
            case 14:
                delIds = localApis.filter(function (f) {
                    var curIndex = saveList_1.findIndex(function (item) { return (item === null || item === void 0 ? void 0 : item.target_id) === (f === null || f === void 0 ? void 0 : f.target_id); });
                    var returenVal = (f === null || f === void 0 ? void 0 : f.auto_import_id) === auto_import_id &&
                        curIndex === -1 &&
                        (!f.hasOwnProperty('status') || f.status === '1' || f.status === 1) &&
                        (f === null || f === void 0 ? void 0 : f.parent_id) == import_folder_id;
                    return returenVal;
                });
                delIds = delIds.map(function (a) { return a === null || a === void 0 ? void 0 : a.target_id; });
                normalList = localApis.filter(function (item) {
                    return (item === null || item === void 0 ? void 0 : item.parent_id) === folder_id &&
                        (!item.hasOwnProperty('status') || item.status === '1' || item.status === 1) &&
                        item.auto_import_id !== auto_import_id;
                });
                saveList_1 = __spreadArray(__spreadArray([], saveList_1, true), normalList, true);
                normalImportIds_1 = (_c = {},
                    _c[auto_import_id] = {
                        sort: 0,
                        list: [],
                    },
                    _c);
                saveObj_1 = [];
                saveList_1.forEach(function (e) {
                    if (!(e === null || e === void 0 ? void 0 : e.auto_import_id)) {
                        e.auto_import_id = '-1';
                    }
                    if (e.parent_id === folder_id) {
                        if (Object.hasOwnProperty.call(normalImportIds_1, e.auto_import_id)) {
                            normalImportIds_1[e.auto_import_id].list.push(e);
                        }
                        else {
                            normalImportIds_1[e.auto_import_id || '-1'] = {
                                sort: Object.keys(normalImportIds_1).length,
                                list: [e],
                            };
                        }
                    }
                    else {
                        saveObj_1.push(e);
                    }
                });
                newList_1 = [];
                sortIds = Object.keys(normalImportIds_1);
                lastIndex = sortIds.findIndex(function (item) { return item === '-1'; });
                secIndex = sortIds.findIndex(function (item) { return item === auto_import_id; });
                if (lastIndex !== -1)
                    sortIds.splice(lastIndex, 1);
                if (secIndex !== -1)
                    sortIds.splice(secIndex, 1);
                if (secIndex !== -1)
                    sortIds.push(auto_import_id);
                if (lastIndex !== -1)
                    sortIds.push('-1');
                sortIds.forEach(function (key, index) {
                    if (Object.hasOwnProperty.call(normalImportIds_1, key)) {
                        normalImportIds_1[key].sort = index;
                    }
                });
                Object.keys(normalImportIds_1).forEach(function (k) {
                    var _a;
                    var n = normalImportIds_1[k];
                    var curSort = 0;
                    if (n.sort > 0) {
                        var _loop_1 = function (index) {
                            var obj = lodash.find(normalImportIds_1, function (o) { return o.sort === index; });
                            curSort += (((_a = obj === null || obj === void 0 ? void 0 : obj.list) === null || _a === void 0 ? void 0 : _a.length) || 0);
                        };
                        for (var index = 0; index < n.sort; index++) {
                            _loop_1(index);
                        }
                    }
                    // console.log(curSort, 'curSort');
                    n.list = n.list.sort(function (a, b) { return a.sort - b.sort; });
                    n.list.forEach(function (item, listIndex) {
                        item.sort = listIndex + curSort;
                        newList_1.push(item);
                    });
                });
                newList_1 = __spreadArray(__spreadArray([], newList_1, true), saveObj_1, true);
                return [2 /*return*/, {
                        saveList: newList_1,
                        deleteList: delIds,
                    }];
            case 15: return [2 /*return*/, {
                    saveList: [],
                    deleteList: [],
                }];
        }
    });
}); };

var modeType = {
    'form-data': 'multipart/form-data',
    urlencoded: 'application/x-www-form-urlencoded',
    json: 'application/json',
    xml: 'application/xml',
    javascript: 'application/javascript',
    plain: 'text/plain',
    html: 'text/html',
};
var recursiveFolderPath = function (path, sourceObj, pid, pidName) {
    if (pidName === void 0) { pidName = 'pid'; }
    if (pid && sourceObj[pid]) {
        if (path) {
            path = "".concat(sourceObj[pid].name, "/").concat(path);
        }
        else {
            path = sourceObj[pid].name;
        }
        if (sourceObj[pid][pidName] && sourceObj[pid][pidName] != '0')
            return recursiveFolderPath(path, sourceObj, sourceObj[pid][pidName], pidName);
        return path;
    }
    return path;
};
var removeQuery = function (url) {
    var path = url;
    try {
        var parts = url.split('?');
        path = parts[0];
    }
    catch (error) { }
    return path || '/';
};
var handlePathItemParameters = function (type, arr, pathItem) {
    var _a;
    if (lodash.isArray(arr) && arr.length > 0) {
        if (!pathItem.hasOwnProperty('parameters')) {
            pathItem.parameters = [];
        }
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var item = arr_1[_i];
            if (lodash.isString(item === null || item === void 0 ? void 0 : item.key) &&
                item.key.length > 0 &&
                (!item.hasOwnProperty('is_checked') || (item === null || item === void 0 ? void 0 : item.is_checked) > 0)) {
                pathItem.parameters.push({
                    name: item.key,
                    in: type,
                    description: (item === null || item === void 0 ? void 0 : item.description) || '',
                    required: (item === null || item === void 0 ? void 0 : item.not_null) === 1,
                    example: String((item === null || item === void 0 ? void 0 : item.value) || ''),
                    schema: {
                        type: (_a = item === null || item === void 0 ? void 0 : item.field_type) === null || _a === void 0 ? void 0 : _a.toLowerCase()
                    }
                });
            }
        }
    }
};
var splicedPath = function (name, version) {
    if (version === '2.0') {
        return "#/definitions/".concat(name);
    }
    console.log('namenamename', name);
    return "#/components/schemas/".concat(name);
};
var deepHandleModelRef = function (modelObj, modelsObj, version) {
    var _a, _b, _c;
    var result = modelObj;
    var _loop_1 = function (key) {
        if (modelObj.hasOwnProperty(key)) {
            var value_1 = modelObj[key];
            // 如果属性名为 "APIPOST_REFS"
            if (key === 'APIPOST_REFS') {
                var lonely = !modelObj.hasOwnProperty('properties') || lodash.isEmpty(modelObj.properties);
                // console.log('valuevalue',JSON.stringify(modelsObj),'modelsObjmodelsObj',JSON.stringify(value));
                if (lodash.isPlainObject(value_1) && !lodash.isEmpty(value_1)) {
                    var refArr = Object.keys(value_1);
                    var modelPath_1 = '';
                    if (refArr.length > 1) {
                        if (!modelObj.hasOwnProperty('properties')) {
                            modelObj.properties = {};
                        }
                        refArr.forEach(function (item) {
                            var _a;
                            var modelObjItem = modelsObj === null || modelsObj === void 0 ? void 0 : modelsObj[(_a = value_1 === null || value_1 === void 0 ? void 0 : value_1[item]) === null || _a === void 0 ? void 0 : _a.ref];
                            modelPath_1 = splicedPath(modelObjItem === null || modelObjItem === void 0 ? void 0 : modelObjItem.modelPath, version);
                            modelObjItem === null || modelObjItem === void 0 ? void 0 : modelObjItem.name;
                            modelObj.properties['$ref'] = modelPath_1;
                        });
                    }
                    else {
                        var oldRef = (_a = value_1 === null || value_1 === void 0 ? void 0 : value_1[refArr[0]]) === null || _a === void 0 ? void 0 : _a.ref;
                        console.log('oldRefoldRefoldRef', oldRef, modelsObj === null || modelsObj === void 0 ? void 0 : modelsObj[oldRef]);
                        var hasInvPath = (_b = modelsObj === null || modelsObj === void 0 ? void 0 : modelsObj[oldRef]) === null || _b === void 0 ? void 0 : _b.modelPath;
                        var modelPath_2 = splicedPath((_c = modelsObj === null || modelsObj === void 0 ? void 0 : modelsObj[oldRef]) === null || _c === void 0 ? void 0 : _c.modelPath, version);
                        if (lonely && hasInvPath) {
                            modelObj.$ref = modelPath_2;
                        }
                        else {
                            refArr.forEach(function (item) {
                                var _a;
                                var modelObjItem = modelsObj === null || modelsObj === void 0 ? void 0 : modelsObj[(_a = value_1 === null || value_1 === void 0 ? void 0 : value_1[item]) === null || _a === void 0 ? void 0 : _a.ref];
                                modelPath_2 = splicedPath(modelObjItem === null || modelObjItem === void 0 ? void 0 : modelObjItem.modelPath, version);
                                modelObjItem === null || modelObjItem === void 0 ? void 0 : modelObjItem.name;
                                modelObj.properties['$ref'] = modelPath_2;
                            });
                        }
                    }
                }
            }
            // 如果属性是一个对象，就递归查找
            else if (typeof value_1 === 'object' && value_1 !== null) {
                modelObj[key] = deepHandleModelRef(value_1, modelsObj, version);
            }
        }
    };
    // 遍历所有属性
    for (var key in modelObj) {
        _loop_1(key);
    }
    return result;
};
var handlePathItemBodyParameters = function (body, pathItem, modelsObj) {
    if (lodash.isPlainObject(body) && !lodash.isEmpty(body) && (body === null || body === void 0 ? void 0 : body.mode) != 'none') {
        if (!pathItem.hasOwnProperty('parameters')) {
            pathItem.parameters = [];
        }
        var mode = modeType[body === null || body === void 0 ? void 0 : body.mode];
        if (lodash.isString(mode) && mode.length > 0) {
            if ([
                'application/json',
                'application/xml',
                'application/javascript',
                'text/plain',
                'text/html',
            ].includes(mode)) {
                var obj = {
                    in: 'body',
                    name: 'body',
                    description: '',
                    schema: (body === null || body === void 0 ? void 0 : body.raw_schema) || {},
                    type: 'string',
                    example: (body === null || body === void 0 ? void 0 : body.raw) || '',
                };
                obj = deepHandleModelRef(obj, modelsObj, '2.0');
                pathItem.parameters.push(obj);
            }
            else if (['multipart/form-data', 'application/x-www-form-urlencoded'].includes(mode)) {
                var parameter = (body === null || body === void 0 ? void 0 : body.parameter) || [];
                if (lodash.isArray(parameter) && parameter.length > 0) {
                    parameter.forEach(function (item) {
                        if (lodash.isString(item === null || item === void 0 ? void 0 : item.key) &&
                            item.key.length > 0 &&
                            (!item.hasOwnProperty('is_checked') || (item === null || item === void 0 ? void 0 : item.is_checked) > 0)) {
                            pathItem.parameters.push({
                                in: "formData",
                                name: 'body',
                                type: 'string',
                                description: (item === null || item === void 0 ? void 0 : item.description) || '',
                                default: (item === null || item === void 0 ? void 0 : item.value) || '',
                            });
                        }
                    });
                }
            }
        }
    }
};
var handlePathItemrequestBody = function (body, pathItem) {
    if (lodash.isPlainObject(body) && !lodash.isEmpty(body) && (body === null || body === void 0 ? void 0 : body.mode) != 'none') {
        if (!pathItem.hasOwnProperty('requestBody')) {
            pathItem.requestBody = {
                content: {},
            };
        }
        var mode = modeType[body === null || body === void 0 ? void 0 : body.mode];
        if (lodash.isString(mode) && mode.length > 0) {
            if ([
                'application/json',
                'application/xml',
                'application/javascript',
                'text/plain',
                'text/html',
            ].includes(mode)) {
                pathItem.requestBody.content[mode] = {
                    schema: (body === null || body === void 0 ? void 0 : body.raw_schema) || {
                        type: 'string',
                    },
                    example: (body === null || body === void 0 ? void 0 : body.raw) || '',
                };
            }
            else if (['multipart/form-data', 'application/x-www-form-urlencoded'].includes(mode)) {
                var parameter = (body === null || body === void 0 ? void 0 : body.parameter) || [];
                if (lodash.isArray(parameter) && parameter.length > 0) {
                    pathItem.requestBody.content[mode] = {
                        schema: {
                            type: 'object',
                        },
                        properties: parameter.reduce(function (lastData, item) {
                            if (lodash.isString(item === null || item === void 0 ? void 0 : item.key) &&
                                item.key.length > 0 &&
                                (!item.hasOwnProperty('is_checked') || (item === null || item === void 0 ? void 0 : item.is_checked) > 0)) {
                                lastData[item.key] = {
                                    type: 'string',
                                    description: (item === null || item === void 0 ? void 0 : item.description) || '',
                                    example: (item === null || item === void 0 ? void 0 : item.value) || '',
                                };
                            }
                            return lastData;
                        }, {}),
                    };
                }
            }
        }
    }
    else {
        (pathItem === null || pathItem === void 0 ? void 0 : pathItem.requestBody) && delete pathItem.requestBody;
    }
};
var handelPathItemResponse = function (response, pathItem) {
    var temp_responses = {};
    if (lodash.isPlainObject(response)) {
        Object.keys(response).forEach(function (key) {
            var _a;
            var _b, _c, _d, _e;
            var item = response[key];
            var code = (_b = item === null || item === void 0 ? void 0 : item.expect) === null || _b === void 0 ? void 0 : _b.code;
            if (lodash.isNumber(code)) {
                temp_responses[code] = {
                    "description": ((_c = item === null || item === void 0 ? void 0 : item.expect) === null || _c === void 0 ? void 0 : _c.name) || '',
                    "content": (_a = {},
                        _a[(modeType === null || modeType === void 0 ? void 0 : modeType[(_d = item === null || item === void 0 ? void 0 : item.expect) === null || _d === void 0 ? void 0 : _d.contentType]) || '*/*'] = {
                            "schema": ((_e = item === null || item === void 0 ? void 0 : item.expect) === null || _e === void 0 ? void 0 : _e.schema) || {}
                        },
                        _a),
                };
            }
        });
    }
    return temp_responses;
};
var array2NamePathObj = function (items, idName, pidName, modelsObj, version, exportApipostObj) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    if (idName === void 0) { idName = 'id'; }
    if (pidName === void 0) { pidName = 'pid'; }
    try {
        var paths = {};
        var folderObj = {};
        var sourceObj_1 = {};
        items.forEach(function (item) {
            sourceObj_1[item[idName]] = item;
        });
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            var id = item[idName];
            var pid = item[pidName];
            if (!id || id == undefined) {
                continue;
            }
            if (item.target_type == 'api') {
                var temp_url = removeQuery((_a = item === null || item === void 0 ? void 0 : item.request) === null || _a === void 0 ? void 0 : _a.url);
                var path = recursiveFolderPath('', sourceObj_1, pid, pidName);
                var targetMethod = (_b = item === null || item === void 0 ? void 0 : item.method) === null || _b === void 0 ? void 0 : _b.toLocaleLowerCase();
                item.path = path;
                if (!paths.hasOwnProperty(temp_url)) {
                    paths[temp_url] = {};
                }
                if (!paths[temp_url].hasOwnProperty(targetMethod)) {
                    var pathItem = {
                        summary: (item === null || item === void 0 ? void 0 : item.name) || '',
                        description: ((_c = item === null || item === void 0 ? void 0 : item.request) === null || _c === void 0 ? void 0 : _c.description) || '',
                        // apipost_tags: item?.tags || [],
                        // tags:[],
                        tags: (item === null || item === void 0 ? void 0 : item.tags) || [],
                    };
                    handlePathItemParameters('query', ((_e = (_d = item === null || item === void 0 ? void 0 : item.request) === null || _d === void 0 ? void 0 : _d.query) === null || _e === void 0 ? void 0 : _e.parameter) || [], pathItem);
                    handlePathItemParameters('header', ((_g = (_f = item === null || item === void 0 ? void 0 : item.request) === null || _f === void 0 ? void 0 : _f.header) === null || _g === void 0 ? void 0 : _g.parameter) || [], pathItem);
                    if (version == '2.0') {
                        handlePathItemBodyParameters(((_h = item === null || item === void 0 ? void 0 : item.request) === null || _h === void 0 ? void 0 : _h.body) || {}, pathItem, modelsObj);
                    }
                    else {
                        handlePathItemrequestBody(((_j = item === null || item === void 0 ? void 0 : item.request) === null || _j === void 0 ? void 0 : _j.body) || {}, pathItem);
                    }
                    pathItem.requestBody = deepHandleModelRef(pathItem.requestBody, modelsObj, version);
                    if (path && path.length > 0 && !pathItem.tags.includes(path)) {
                        pathItem.tags.push(path);
                    }
                    // 添加响应期望 responses
                    pathItem.responses = handelPathItemResponse((item === null || item === void 0 ? void 0 : item.response) || {}, pathItem);
                    pathItem.responses = deepHandleModelRef(pathItem.responses, modelsObj, version);
                    paths[temp_url][targetMethod] = pathItem;
                }
                else if (path && path.length > 0 && !((_k = paths[temp_url][targetMethod]) === null || _k === void 0 ? void 0 : _k.tags.includes(path))) {
                    (_l = paths[temp_url][targetMethod]) === null || _l === void 0 ? void 0 : _l.tags.push(path);
                }
                // paths[temp_url][item?.method].push(item);
            }
            else if (item.target_type == 'folder') {
                var path = recursiveFolderPath("".concat(item === null || item === void 0 ? void 0 : item.name), sourceObj_1, pid, pidName);
                item.path = path;
                if (!folderObj.hasOwnProperty(item === null || item === void 0 ? void 0 : item.name)) {
                    if (!exportApipostObj.tags) {
                        exportApipostObj.tags = [];
                    }
                    exportApipostObj.tags.push({ name: (item === null || item === void 0 ? void 0 : item.name) || '新建目录', description: (item === null || item === void 0 ? void 0 : item.description) || "" });
                    folderObj[item === null || item === void 0 ? void 0 : item.name] = item;
                }
            }
        }
        return {
            paths: paths,
            folderObj: folderObj,
        };
    }
    catch (error) {
        return {};
    }
};
var array2TreeExport = function (items, idName, pidName, exportApipostObj, version, modelsObj) {
    if (idName === void 0) { idName = 'id'; }
    if (pidName === void 0) { pidName = 'pid'; }
    try {
        var _a = array2NamePathObj(items, idName, pidName, modelsObj, version, exportApipostObj), paths = _a.paths, folderObj = _a.folderObj;
        // console.log(JSON.stringify(folderObj), 'folderObj');
        exportApipostObj.paths = paths;
    }
    catch (error) {
        return [];
    }
};
var handleProject = function (exportApipostObj, project, version) {
    var _a = project || {}, name = _a.name, description = _a.description, details = _a.details;
    var _b = details || {}; _b.script; var request = _b.request; _b.markList; _b.globalDescriptionVars;
    var _c = request || {}; _c.query; _c.header; _c.body; _c.auth;
    exportApipostObj.info = {
        title: name || '新建项目',
        description: description || '',
        version: '1.0.0',
    };
    if (version == '2.0') {
        exportApipostObj.swagger = '2.0';
    }
    else if (version == '3.0') {
        exportApipostObj.openapi = '3.0.0';
    }
};
var handleApis = function (exportApipostObj, apis, version, modelsObj) {
    if (lodash.isArray(apis) && apis.length > 0) {
        array2TreeExport(apis, 'target_id', 'parent_id', exportApipostObj, version, modelsObj) || [];
    }
};
var handleModels = function (exportApipostObj, temp_models, version) {
    var modelsObj = {};
    var models = temp_models.filter(function (item) { return (item === null || item === void 0 ? void 0 : item.model_type) === 'model'; });
    if (lodash.isArray(models) && models.length > 0) {
        var components = {
            schemas: {},
        };
        var modelsPathObj_1 = {};
        modelsObj = models.reduce(function (lastObj, item) {
            if (item === null || item === void 0 ? void 0 : item.model_id) {
                var modelPath = "".concat(item === null || item === void 0 ? void 0 : item.name);
                if (modelsPathObj_1.hasOwnProperty(modelPath)) {
                    while (!modelsPathObj_1.hasOwnProperty(modelPath)) {
                        modelPath += '1';
                    }
                }
                item.modelPath = modelPath;
                modelsPathObj_1[modelPath] = item;
                lastObj[item.model_id] = item;
                return lastObj;
            }
        }, {});
        components.schemas = Object.keys(modelsPathObj_1).reduce(function (lastObj, key) {
            var modelObj = modelsPathObj_1[key];
            if (!modelObj.hasOwnProperty('schema') || !lodash.isPlainObject(modelObj.schema)) {
                modelObj.schema = {};
            }
            modelObj.schema.title = (modelObj === null || modelObj === void 0 ? void 0 : modelObj.display_name) || '';
            // 处理完所有当前模型所有引用
            lastObj[key] = deepHandleModelRef(modelObj.schema, modelsObj, version);
            return lastObj;
        }, {});
        if (version === '2.0') {
            exportApipostObj.definitions = components.schemas;
        }
        else if (version === '3.0') {
            exportApipostObj.components = components;
        }
    }
    return modelsObj;
};
var handleEnvs = function (exportApipostObj, envs, version) {
    // if (version == '2.0') {
    // } else if (version == '3.0') {
    // }
    exportApipostObj.servers = [];
    if (lodash.isArray(envs) && envs.length > 0) {
        for (var _i = 0, envs_1 = envs; _i < envs_1.length; _i++) {
            var env = envs_1[_i];
            var servers = {
                url: (env === null || env === void 0 ? void 0 : env.pre_url) || '',
                description: (env === null || env === void 0 ? void 0 : env.name) || '新建环境',
            };
            if (lodash.isPlainObject(env === null || env === void 0 ? void 0 : env.list)) {
                servers.variables = {};
                for (var key in env === null || env === void 0 ? void 0 : env.list) {
                    var variable = env.list[key];
                    servers.variables[key] = {
                        default: (variable === null || variable === void 0 ? void 0 : variable.current_value) || (variable === null || variable === void 0 ? void 0 : variable.value),
                        description: (variable === null || variable === void 0 ? void 0 : variable.description) || '',
                    };
                }
            }
            exportApipostObj.servers.push(servers);
        }
    }
};
var generateProperties = function (objStr) {
    var ret = {};
    try {
        var obj = JSON.parse(objStr);
        for (var key in obj) {
            if (lodash.isPlainObject(obj[key])) {
                ret[key] = {
                    type: 'object',
                    properties: generateProperties(JSON.stringify(obj[key])),
                };
            }
            else if (obj[key]) {
                ret[key] = {
                    type: typeof obj[key] === 'number' ? 'integer' : typeof obj[key],
                    example: obj[key],
                };
            }
        }
    }
    catch (e) { }
    return ret;
};
var formatTags = function (tag) {
    if (tag === void 0) { tag = ''; }
    return tag.split('/') || [];
};
var formatRequestItem = function (key, item) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    var content = ((_a = item === null || item === void 0 ? void 0 : item.requestBody) === null || _a === void 0 ? void 0 : _a.content) || {};
    var tags = (item === null || item === void 0 ? void 0 : item.tags) || [];
    var keys = Object.keys(content);
    if (keys.length > 0) {
        var key_1 = keys[0];
        switch (key_1) {
            case 'multipart/form-data':
                content[key_1].schema = {
                    properties: ((_b = content[key_1]) === null || _b === void 0 ? void 0 : _b.properties) || {},
                };
                (_d = (_c = item === null || item === void 0 ? void 0 : item.requestBody) === null || _c === void 0 ? void 0 : _c.content[key_1]) === null || _d === void 0 ? true : delete _d.properties;
                item.requestBody.content = content || {};
                break;
            case 'application/x-www-form-urlencoded':
                content[key_1].schema = {
                    properties: ((_e = content[key_1]) === null || _e === void 0 ? void 0 : _e.properties) || {},
                };
                (_g = (_f = item === null || item === void 0 ? void 0 : item.requestBody) === null || _f === void 0 ? void 0 : _f.content[key_1]) === null || _g === void 0 ? true : delete _g.properties;
                item.requestBody.content = content || {};
                break;
            case 'application/json':
                var exampleStr = (_h = content[key_1]) === null || _h === void 0 ? void 0 : _h.example;
                (_k = (_j = item === null || item === void 0 ? void 0 : item.requestBody) === null || _j === void 0 ? void 0 : _j.content[key_1]) === null || _k === void 0 ? true : delete _k.example;
                var properties = generateProperties(exampleStr);
                content[key_1].schema = {
                    type: 'object',
                    properties: properties || {},
                };
                // item?.requestBody?.content = content || {};
                break;
        }
    }
    return __assign(__assign({}, item), { tags: formatTags(tags[0]) });
};
var formatData = function (data) {
    var _a;
    var paths = data.paths;
    var tempPaths = {};
    for (var path in paths) {
        var item = paths[path];
        var keys = Object.keys(item);
        if (keys.length > 0) {
            var key = keys[0];
            var tempData = formatRequestItem(key, lodash.cloneDeep(item[key]));
            tempPaths[path] = (_a = {},
                _a[key.toLocaleLowerCase()] = tempData,
                _a);
        }
    }
    data.paths = tempPaths;
    return data;
};
var handleGenerateMeterSphere = function (result) {
    return formatData(result);
};
var apipost2exportSwagger = function (apipostObj, version) {
    var exportSwaggerObj = {};
    var tempVersion = version;
    if ("".concat(version) === 'metersphere') {
        tempVersion = '3.0';
    }
    try {
        var _a = apipostObj || {}, project = _a.project, apis = _a.apis, envs = _a.envs, models = _a.models;
        // 处理项目信息
        handleProject(exportSwaggerObj, project, tempVersion);
        // 处理数据模型
        var modelsObj = handleModels(exportSwaggerObj, models, tempVersion);
        // 处理apis
        handleApis(exportSwaggerObj, apis, tempVersion, modelsObj);
        // 处理环境信息
        handleEnvs(exportSwaggerObj, envs, tempVersion);
        var result = Atools__default["default"].successResult(exportSwaggerObj);
        // console.log('apipost2exportApipost', JSON.stringify(result, null, '\t'));
        if ("".concat(version) === 'metersphere') {
            result.data = handleGenerateMeterSphere(result === null || result === void 0 ? void 0 : result.data);
        }
        return result;
    }
    catch (error) {
        Atools__default["default"].errorResult(String(error));
    }
};

var MODE = {
    none: 'none',
    formdata: 'form-data',
    urlencoded: 'urlencoded',
    raw: {
        json: 'json',
        xml: 'xml',
        javascript: 'javascript',
        text: 'plain',
        html: 'html',
    },
};
var curlPostman2apipost = function (collection) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    // NOTE comment 字段应该没有作用
    try {
        var api = lodash.cloneDeep(DEFAULT_API_DATA);
        api.description = (collection === null || collection === void 0 ? void 0 : collection.comment) || '';
        api.method = (collection === null || collection === void 0 ? void 0 : collection.method) || 'GET';
        api.url = (collection === null || collection === void 0 ? void 0 : collection.url) || '';
        api.target_id = Atools.snowflakeId();
        var request = api.request;
        if (collection.hasOwnProperty('header') && collection.header instanceof Array) {
            for (var _i = 0, _v = collection.header; _i < _v.length; _i++) {
                var headerItem = _v[_i];
                request.header.parameter.push({
                    is_checked: 1,
                    key: (headerItem === null || headerItem === void 0 ? void 0 : headerItem.key) || '',
                    value: (headerItem === null || headerItem === void 0 ? void 0 : headerItem.value) || '',
                    not_null: 1,
                    description: (headerItem === null || headerItem === void 0 ? void 0 : headerItem.comment) || '',
                    field_type: 'String',
                    param_id: Atools.snowflakeId(),
                });
            }
        }
        // NOTE postman collection 没有 queryString 手动提取query
        var parsedUrlQuery = ((_a = urlParse__default["default"](collection === null || collection === void 0 ? void 0 : collection.url)) === null || _a === void 0 ? void 0 : _a.query) || '';
        var urlQuery = Atools.getUrlQueryArray(parsedUrlQuery);
        if (urlQuery && lodash.size(urlQuery) > 0) {
            for (var _w = 0, urlQuery_1 = urlQuery; _w < urlQuery_1.length; _w++) {
                var query = urlQuery_1[_w];
                request.query.parameter.push({
                    is_checked: 1,
                    key: ((_b = query === null || query === void 0 ? void 0 : query.key) === null || _b === void 0 ? void 0 : _b.trim()) || '',
                    value: ((_c = query === null || query === void 0 ? void 0 : query.value) === null || _c === void 0 ? void 0 : _c.trim()) || '',
                    not_null: 1,
                    description: (query === null || query === void 0 ? void 0 : query.comment) || '',
                    field_type: 'String',
                    param_id: Atools.snowflakeId(),
                });
            }
        }
        if (collection.hasOwnProperty('body') && collection.body instanceof Object) {
            if (collection.body.hasOwnProperty('mode')) {
                var apipostMode = 'none';
                var collectionBodyMode = (_d = collection === null || collection === void 0 ? void 0 : collection.body) === null || _d === void 0 ? void 0 : _d.mode;
                if (collectionBodyMode === 'raw') {
                    apipostMode = MODE.raw[(_g = (_f = (_e = collection.body) === null || _e === void 0 ? void 0 : _e.options) === null || _f === void 0 ? void 0 : _f.raw) === null || _g === void 0 ? void 0 : _g.language] || 'json';
                }
                else if (collectionBodyMode === 'graphql') {
                    apipostMode = 'json';
                }
                else {
                    apipostMode = MODE[collectionBodyMode] || 'none';
                }
                request.body.mode = apipostMode;
                request.body.raw = ((_h = collection.body) === null || _h === void 0 ? void 0 : _h.raw) || '';
                if (collectionBodyMode === 'graphql') {
                    request.body.raw = JSON.stringify({
                        query: (_k = (_j = collection === null || collection === void 0 ? void 0 : collection.body) === null || _j === void 0 ? void 0 : _j.graphql) === null || _k === void 0 ? void 0 : _k.query,
                        variables: (_m = (_l = collection === null || collection === void 0 ? void 0 : collection.body) === null || _l === void 0 ? void 0 : _l.graphql) === null || _m === void 0 ? void 0 : _m.variables,
                    }, null);
                }
                if (collection.body.hasOwnProperty(collectionBodyMode) &&
                    collection.body[collectionBodyMode] instanceof Array && collectionBodyMode !== 'graphql') {
                    for (var _x = 0, _y = collection.body[collectionBodyMode]; _x < _y.length; _x++) {
                        var item = _y[_x];
                        request.body.parameter.push({
                            is_checked: 1,
                            key: (item === null || item === void 0 ? void 0 : item.key) || '',
                            value: (item === null || item === void 0 ? void 0 : item.value) || '',
                            not_null: 1,
                            description: (item === null || item === void 0 ? void 0 : item.comment) || '',
                            field_type: item.type === 'text' ? 'String' : 'File',
                            param_id: Atools.snowflakeId(),
                        });
                    }
                }
            }
        }
        if (lodash.has(collection, "auth")) {
            var customAuth = {};
            var auth = lodash.get(collection, 'auth');
            var authMap = (_o = auth === null || auth === void 0 ? void 0 : auth[auth === null || auth === void 0 ? void 0 : auth.type]) === null || _o === void 0 ? void 0 : _o.reduce(function (pre, item) {
                if (item === null || item === void 0 ? void 0 : item.key) {
                    pre[item === null || item === void 0 ? void 0 : item.key] = item === null || item === void 0 ? void 0 : item.value;
                }
                return pre;
            }, {});
            if ((auth === null || auth === void 0 ? void 0 : auth.type) === "basic") {
                var username = (_p = auth === null || auth === void 0 ? void 0 : auth.basic) === null || _p === void 0 ? void 0 : _p.find(function (item) { return (item === null || item === void 0 ? void 0 : item.key) === "username"; });
                var password = (_q = auth === null || auth === void 0 ? void 0 : auth.basic) === null || _q === void 0 ? void 0 : _q.find(function (item) { return (item === null || item === void 0 ? void 0 : item.key) === "password"; });
                customAuth["type"] = "basic";
                customAuth["basic"] = {
                    username: (username === null || username === void 0 ? void 0 : username.value) || "",
                    password: (password === null || password === void 0 ? void 0 : password.value) || "",
                };
            }
            else if ((auth === null || auth === void 0 ? void 0 : auth.type) === "bearer") {
                customAuth["type"] = "bearer";
                var token = (_r = auth === null || auth === void 0 ? void 0 : auth.bearer) === null || _r === void 0 ? void 0 : _r.find(function (item) { return (item === null || item === void 0 ? void 0 : item.key) === "token"; });
                customAuth["bearer"] = {
                    key: (token === null || token === void 0 ? void 0 : token.value) || "",
                };
            }
            else if ((auth === null || auth === void 0 ? void 0 : auth.type) === "digest") {
                customAuth["type"] = "digest";
                customAuth["digest"] = {
                    username: (authMap === null || authMap === void 0 ? void 0 : authMap.username) || "",
                    password: (authMap === null || authMap === void 0 ? void 0 : authMap.password) || "",
                    realm: (authMap === null || authMap === void 0 ? void 0 : authMap.realm) || "",
                    nonce: (authMap === null || authMap === void 0 ? void 0 : authMap.nonce) || "",
                    algorithm: (authMap === null || authMap === void 0 ? void 0 : authMap.algorithm) || "MD5",
                    qop: (authMap === null || authMap === void 0 ? void 0 : authMap.qop) || "",
                    nc: (authMap === null || authMap === void 0 ? void 0 : authMap.nonceCount) || "",
                    cnonce: (authMap === null || authMap === void 0 ? void 0 : authMap.clientNonce) || "",
                    opaque: (authMap === null || authMap === void 0 ? void 0 : authMap.opaque) || "",
                    disableRetryRequest: (authMap === null || authMap === void 0 ? void 0 : authMap.disableRetryRequest) ? true : false,
                };
            }
            else if ((auth === null || auth === void 0 ? void 0 : auth.type) === "oauth1") {
                customAuth["type"] = "oauth1";
                customAuth["oauth1"] = {
                    consumerKey: (authMap === null || authMap === void 0 ? void 0 : authMap.consumerKey) || "",
                    consumerSecret: (authMap === null || authMap === void 0 ? void 0 : authMap.consumerSecret) || "",
                    signatureMethod: (authMap === null || authMap === void 0 ? void 0 : authMap.signatureMethod) || "HMAC-SHA1",
                    addEmptyParamsToSign: (authMap === null || authMap === void 0 ? void 0 : authMap.addEmptyParamsToSign) ? true : false,
                    includeBodyHash: (authMap === null || authMap === void 0 ? void 0 : authMap.includeBodyHash) ? true : false,
                    addParamsToHeader: (authMap === null || authMap === void 0 ? void 0 : authMap.addParamsToHeader) ? true : false,
                    realm: (authMap === null || authMap === void 0 ? void 0 : authMap.realm) || "",
                    version: (authMap === null || authMap === void 0 ? void 0 : authMap.version) || "1.0",
                    nonce: (authMap === null || authMap === void 0 ? void 0 : authMap.nonce) || "",
                    timestamp: (authMap === null || authMap === void 0 ? void 0 : authMap.timestamp) || "",
                    verifier: (authMap === null || authMap === void 0 ? void 0 : authMap.verifier) || "",
                    callback: (authMap === null || authMap === void 0 ? void 0 : authMap.callback) || "",
                    tokenSecret: (authMap === null || authMap === void 0 ? void 0 : authMap.tokenSecret) || "",
                    token: (authMap === null || authMap === void 0 ? void 0 : authMap.token) || "",
                    disableHeaderEncoding: (authMap === null || authMap === void 0 ? void 0 : authMap.disableHeaderEncoding) ? true : false,
                };
            }
            else if ((auth === null || auth === void 0 ? void 0 : auth.type) === "oauth2") {
                customAuth["type"] = "oauth2";
                customAuth["oauth2"] = {
                    addTokenTo: (authMap === null || authMap === void 0 ? void 0 : authMap.addTokenTo) || 'header',
                    headerPrefix: (authMap === null || authMap === void 0 ? void 0 : authMap.headerPrefix) || 'Bearer',
                    access_token: '',
                    grant_type: 'authorization_code',
                    redirect_uri: (authMap === null || authMap === void 0 ? void 0 : authMap.redirect_uri) || '',
                    authUrl: (authMap === null || authMap === void 0 ? void 0 : authMap.authUrl) || '',
                    accessTokenUrl: (authMap === null || authMap === void 0 ? void 0 : authMap.accessTokenUrl) || '',
                    clientId: (authMap === null || authMap === void 0 ? void 0 : authMap.clientId) || '',
                    clientSecret: (authMap === null || authMap === void 0 ? void 0 : authMap.clientSecret) || '',
                    username: (authMap === null || authMap === void 0 ? void 0 : authMap.username) || '',
                    password: (authMap === null || authMap === void 0 ? void 0 : authMap.password) || '',
                    challengeAlgorithm: (authMap === null || authMap === void 0 ? void 0 : authMap.challengeAlgorithm) || 'S256',
                    code_verifier: (authMap === null || authMap === void 0 ? void 0 : authMap.code_verifier) || 'Bearer',
                    scope: (authMap === null || authMap === void 0 ? void 0 : authMap.scope) || '',
                    state: (authMap === null || authMap === void 0 ? void 0 : authMap.state) || '',
                    client_authentication: (authMap === null || authMap === void 0 ? void 0 : authMap.client_authentication) || 'header',
                    refreshTokenUrl: (authMap === null || authMap === void 0 ? void 0 : authMap.refreshTokenUrl) || '',
                    authRequestParams: lodash.isArray(authMap === null || authMap === void 0 ? void 0 : authMap.authRequestParams) ? (_s = authMap === null || authMap === void 0 ? void 0 : authMap.authRequestParams) === null || _s === void 0 ? void 0 : _s.map(function (e) { return (__assign(__assign({}, e), { param_id: Atools.snowflakeId() })); }) : [],
                    tokenRequestParams: lodash.isArray(authMap === null || authMap === void 0 ? void 0 : authMap.tokenRequestParams) ? (_t = authMap === null || authMap === void 0 ? void 0 : authMap.tokenRequestParams) === null || _t === void 0 ? void 0 : _t.map(function (e) { return (__assign(__assign({}, e), { param_id: Atools.snowflakeId() })); }) : [],
                    refreshRequestParams: lodash.isArray(authMap === null || authMap === void 0 ? void 0 : authMap.refreshRequestParams) ? (_u = authMap === null || authMap === void 0 ? void 0 : authMap.refreshRequestParams) === null || _u === void 0 ? void 0 : _u.map(function (e) { return (__assign(__assign({}, e), { param_id: Atools.snowflakeId() })); }) : [],
                };
            }
            else if ((auth === null || auth === void 0 ? void 0 : auth.type) === "hawk") {
                customAuth["type"] = "hawk";
                customAuth["hawk"] = {
                    authId: (authMap === null || authMap === void 0 ? void 0 : authMap.authId) || "",
                    authKey: (authMap === null || authMap === void 0 ? void 0 : authMap.authKey) || "",
                    algorithm: (authMap === null || authMap === void 0 ? void 0 : authMap.algorithm) || "",
                    user: (authMap === null || authMap === void 0 ? void 0 : authMap.user) || "",
                    nonce: (authMap === null || authMap === void 0 ? void 0 : authMap.nonce) || "",
                    extraData: (authMap === null || authMap === void 0 ? void 0 : authMap.extraData) || "",
                    app: (authMap === null || authMap === void 0 ? void 0 : authMap.app) || "",
                    delegation: (authMap === null || authMap === void 0 ? void 0 : authMap.delegation) || "",
                    timestamp: (authMap === null || authMap === void 0 ? void 0 : authMap.timestamp) || "",
                    includePayloadHash: (authMap === null || authMap === void 0 ? void 0 : authMap.includePayloadHash) ? true : false,
                };
            }
            else if ((auth === null || auth === void 0 ? void 0 : auth.type) === "awsv4") {
                customAuth["type"] = "awsv4";
                customAuth["awsv4"] = {
                    accessKey: (authMap === null || authMap === void 0 ? void 0 : authMap.accessKey) || "",
                    secretKey: (authMap === null || authMap === void 0 ? void 0 : authMap.secretKey) || "",
                    region: (authMap === null || authMap === void 0 ? void 0 : authMap.region) || "",
                    service: (authMap === null || authMap === void 0 ? void 0 : authMap.service) || "",
                    sessionToken: (authMap === null || authMap === void 0 ? void 0 : authMap.sessionToken) || "",
                    addAuthDataToQuery: (authMap === null || authMap === void 0 ? void 0 : authMap.addAuthDataToQuery) ? true : false,
                };
            }
            else if ((auth === null || auth === void 0 ? void 0 : auth.type) === "ntlm") {
                customAuth["type"] = "ntlm";
                customAuth["ntlm"] = {
                    username: (authMap === null || authMap === void 0 ? void 0 : authMap.username) || "",
                    password: (authMap === null || authMap === void 0 ? void 0 : authMap.password) || "",
                    domain: (authMap === null || authMap === void 0 ? void 0 : authMap.domain) || "",
                    workstation: (authMap === null || authMap === void 0 ? void 0 : authMap.workstation) || "",
                    disableRetryRequest: (authMap === null || authMap === void 0 ? void 0 : authMap.disableRetryRequest) ? true : false,
                };
            }
            else if ((auth === null || auth === void 0 ? void 0 : auth.type) === "apikey") {
                customAuth["type"] = "kv";
                customAuth["kv"] = {
                    key: (authMap === null || authMap === void 0 ? void 0 : authMap.key) || "",
                    value: (authMap === null || authMap === void 0 ? void 0 : authMap.value) || "",
                    in: (authMap === null || authMap === void 0 ? void 0 : authMap.in) || "header",
                };
            }
            else if ((auth === null || auth === void 0 ? void 0 : auth.type) === "edgegrid") {
                customAuth["type"] = "edgegrid";
                customAuth["edgegrid"] = {
                    accessToken: (authMap === null || authMap === void 0 ? void 0 : authMap.accessToken) || "",
                    clientToken: (authMap === null || authMap === void 0 ? void 0 : authMap.clientToken) || "",
                    clientSecret: (authMap === null || authMap === void 0 ? void 0 : authMap.clientSecret) || "",
                    nonce: (authMap === null || authMap === void 0 ? void 0 : authMap.nonce) || "",
                    timestamp: (authMap === null || authMap === void 0 ? void 0 : authMap.timestamp) || "",
                    baseURi: (authMap === null || authMap === void 0 ? void 0 : authMap.baseURL) || "",
                    headersToSign: (authMap === null || authMap === void 0 ? void 0 : authMap.headersToSign) || "",
                };
            }
            else if ((auth === null || auth === void 0 ? void 0 : auth.type) === "jwt") {
                customAuth["type"] = "jwt";
                customAuth["jwt"] = {
                    addTokenTo: (authMap === null || authMap === void 0 ? void 0 : authMap.addTokenTo) || "header",
                    algorithm: (authMap === null || authMap === void 0 ? void 0 : authMap.algorithm) || "HS256",
                    secret: (authMap === null || authMap === void 0 ? void 0 : authMap.secret) || "",
                    isSecretBase64Encoded: (authMap === null || authMap === void 0 ? void 0 : authMap.isSecretBase64Encoded) ? true : false,
                    payload: (authMap === null || authMap === void 0 ? void 0 : authMap.payload) || "",
                    headerPrefix: (authMap === null || authMap === void 0 ? void 0 : authMap.headerPrefix) || "Bearer",
                    queryParamKey: (authMap === null || authMap === void 0 ? void 0 : authMap.queryParamKey) || "token",
                    header: (authMap === null || authMap === void 0 ? void 0 : authMap.header) || "",
                };
            }
            else if ((auth === null || auth === void 0 ? void 0 : auth.type) === "asap") {
                customAuth["type"] = "asap";
                customAuth["asap"] = {
                    alg: (authMap === null || authMap === void 0 ? void 0 : authMap.alg) || "HS256",
                    iss: (authMap === null || authMap === void 0 ? void 0 : authMap.iss) || "",
                    aud: (authMap === null || authMap === void 0 ? void 0 : authMap.aud) || "",
                    kid: (authMap === null || authMap === void 0 ? void 0 : authMap.kid) || "",
                    privateKey: (authMap === null || authMap === void 0 ? void 0 : authMap.privateKey) || "",
                    sub: (authMap === null || authMap === void 0 ? void 0 : authMap.sub) || "",
                    claims: (authMap === null || authMap === void 0 ? void 0 : authMap.claims) || "",
                    exp: (authMap === null || authMap === void 0 ? void 0 : authMap.exp) || "",
                };
            }
            request.auth = __assign(__assign({}, request.auth), customAuth);
        }
        return api;
    }
    catch (error) {
        return false;
    }
};

var index = {
    import2array: import2array,
    export2str: export2str,
    importdesc2array: importdesc2array,
    exportdesc2str: exportdesc2str,
    objectArr2uniqueArr: objectArr2uniqueArr,
    har2apipost: har2apipost,
    isElectron: isElectron,
    setCookie: setCookie,
    getCookie: getCookie,
    ConvertResult: ConvertResult,
    getCachePath: getCachePath,
    isXml: isXml,
    apipost2exportApipost: apipost2exportApipost,
    str2testDataAsync: str2testDataAsync,
    importSwaggerHandle: importSwaggerHandle,
    apipost2exportSwagger: apipost2exportSwagger,
    har2apipostV8: har2apipostV8,
    curlPostman2apipost: curlPostman2apipost,
};

module.exports = index;
