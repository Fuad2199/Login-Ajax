'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var JSON5 = require('json5');
var xmldom = require('@xmldom/xmldom');
var lodash = require('lodash');
var require$$0 = require('bignumber.js');
var jsoncParser = require('jsonc-parser');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var JSON5__default = /*#__PURE__*/_interopDefaultLegacy(JSON5);
var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);

var isJson = function (str) {
    if (typeof str === 'string') {
        try {
            var obj = JSON.parse(str);
            if (typeof obj === 'object' && obj) {
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            return false;
        }
    }
    else {
        return false;
    }
};

var isJsonp = function (jsonp) {
    try {
        var index = jsonp.indexOf('(');
        var last_index = jsonp.lastIndexOf(')');
        var str = jsonp.slice(index + 1, last_index);
        return isJson(str);
    }
    catch (error) {
        return false;
    }
};

var isJson5 = function (str) {
    if (typeof str === 'string') {
        try {
            var obj = JSON5__default["default"].parse(str);
            if (typeof obj === 'object' && obj) {
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            return false;
        }
    }
    else {
        return false;
    }
};

var isEmail = function (str) {
    try {
        var emaileRegExp = new RegExp('^([a-zA-Z0-9_\\-\.])+@([a-zA-Z0-9_\\-\.])+\.([a-zA-Z]{2,4})$');
        return emaileRegExp.test(str);
    }
    catch (error) {
        return false;
    }
};

var getUrlQuery = function (url) {
    try {
        var urlArr = url.split('?');
        if (urlArr.length > 1) {
            return urlArr[1].split('&').reduce(function (searchParams, curKV) {
                var _a = curKV.split('=').map(decodeURIComponent), k = _a[0], v = _a[1];
                if (!v || v === undefined) {
                    v = '';
                }
                if (k && k.length > 0) {
                    searchParams[k] = v;
                }
                return searchParams;
            }, {});
        }
        return {};
    }
    catch (error) {
        return {};
    }
};

var getUrlQueryArray = function (url) {
    try {
        var array = [];
        var i = url.indexOf('?');
        if (i !== -1) {
            var s = url.substring(i + 1);
            var arrPara = s.split('&');
            var arr = void 0;
            for (var i_1 = 0; i_1 < arrPara.length; i_1++) {
                arr = arrPara[i_1].split('=');
                if (arr != null && arr.length !== 0) {
                    if (arr.length === 1) {
                        array.push({
                            key: arr[0],
                            value: '',
                        });
                    }
                    else {
                        var key = arr[0];
                        arr.shift();
                        array.push({
                            key: key,
                            value: arr.join('='),
                        });
                    }
                }
            }
        }
        return array;
    }
    catch (error) {
        return [];
    }
};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var array2Tree = function (items, idName, pidName) {
    if (idName === void 0) { idName = 'id'; }
    if (pidName === void 0) { pidName = 'pid'; }
    try {
        var result = [];
        var itemMap = {};
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            var id = item[idName];
            var pid = item[pidName];
            if (!id || id == undefined) {
                continue;
            }
            if (!itemMap.hasOwnProperty(id)) {
                itemMap[id] = {
                    children: [],
                };
            }
            itemMap[id] = __assign(__assign({}, item), { children: itemMap[id]['children'] });
            var treeItem = itemMap[id];
            if (pid == 0 || pid == undefined) {
                result.push(treeItem);
            }
            else {
                if (!itemMap.hasOwnProperty(pid)) {
                    itemMap[pid] = {
                        children: [],
                    };
                }
                itemMap[pid].children.push(treeItem);
            }
        }
        return result;
    }
    catch (error) {
        return [];
    }
};

var isHtml = function (html) {
    try {
        if (typeof html !== 'string') {
            //       html = '';
            return false;
        }
        html = html.trim();
        var trimmed = html.replace(/^[ \t\n\r]+/, '');
        return Boolean(trimmed) && (trimmed.substring(0, 1) === '<') && (trimmed.charAt(trimmed.length - 1) === '>');
    }
    catch (error) {
        return false;
    }
};

var ms2second = function (time) {
    try {
        var time_temp = "".concat(time);
        if (time_temp.length === 13) {
            time_temp = time_temp.substr(0, time_temp.length - 3);
        }
        return parseInt(time_temp, 10);
    }
    catch (error) {
        return 0;
    }
};

var isXml = function (val) {
    var _a;
    try {
        var element = (_a = new xmldom.DOMParser().parseFromString(val, 'text/xml')) === null || _a === void 0 ? void 0 : _a.documentElement;
        return lodash.isObject(element);
    }
    catch (ex) {
        return false;
    }
};

var setPrefix = function (prefixIndex) {
    var result = '';
    var span = '    '; // 缩进长度
    var output = [];
    for (var i = 0; i < prefixIndex; ++i) {
        output.push(span);
    }
    result = output.join('');
    return result;
};
var formatXml = function (xmlStr) {
    try {
        var text = xmlStr;
        // 先去除原来的换行和空格
        text = text.replace(/(\r\n)/g, '');
        text = text.replace(/(\n)/g, '');
        text = text.replace(/(\r)/g, '');
        // 使用replace去空格
        text = "\n".concat(text.replace(/(<\w+)(\s.*?>)/g, function ($0, name, props) {
            return "".concat(name, " ").concat(props.replace(/\s+(\w+=)/g, ' $1'));
        }).replace(/>\s*?</g, '>\n<'));
        // 处理注释
        text = text.replace(/\n/g, '\r').replace(/<!--(.+?)-->/g, function ($0, text) {
            var ret = "<!--".concat(escape(text), "-->");
            return ret;
        }).replace(/\r/g, '\n');
        // 调整格式  以压栈方式递归调整缩进
        var rgx = /\n(<(([^\?]).*?)(?:\s|\s*?>|\s*?(\/)>)(?:.*?(?:(?:(\/)>)|(?:<(\/)\2>)))?)/mg;
        var nodeStack_1 = [];
        var output = text.replace(rgx, function ($0, all, name, isBegin, isCloseFull1, isCloseFull2, isFull1, isFull2) {
            var isClosed = (isCloseFull1 == '/') || (isCloseFull2 == '/') || (isFull1 == '/') || (isFull2 == '/');
            var prefix = '';
            if (isBegin == '!') { //! 开头
                prefix = setPrefix(nodeStack_1.length);
            }
            else {
                if (isBegin != '/') { /// 开头
                    prefix = setPrefix(nodeStack_1.length);
                    if (!isClosed) { // 非关闭标签
                        nodeStack_1.push(name);
                    }
                }
                else {
                    nodeStack_1.pop(); // 弹栈
                    prefix = setPrefix(nodeStack_1.length);
                }
            }
            var ret = "\n".concat(prefix).concat(all);
            return ret;
        });
        var outputText = output.substring(1);
        // 还原注释内容
        outputText = outputText.replace(/\n/g, '\r').replace(/(\s*)<!--(.+?)-->/g, function ($0, prefix, text) {
            if (prefix.charAt(0) == '\r') {
                prefix = prefix.substring(1);
            }
            text = unescape(text).replace(/\r/g, '\n');
            var ret = "\n".concat(prefix, "<!--").concat(text.replace(/^\s*/mg, prefix), "-->");
            return ret;
        });
        outputText = outputText.replace(/\s+$/g, '').replace(/\r/g, '\r\n');
        return outputText;
    }
    catch (error) {
        return '';
    }
};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var dist = {exports: {}};

var htmlBeautify = {exports: {}};

(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = function (html) {
  try {
    return beautify(html);
  } catch (error) {
    console.error(error);
  }
};

var SPACE = '   ';

var NEW_LINE = '\n';

var SINGLETON_TAGS = ['meta', 'link', 'area', 'base', 'col', 'command', 'embeded', 'source', 'link'];

var INLINE_TAGS = ['b', 'big', 'i', 'small', 'tt', 'abbr', 'acronym', 'cite', 'dfn', 'em', 'kbd', 'strong', 'samp', 'time', 'var', 'a', 'bdo', 'br', 'br', 'img', 'map', 'object', 'q', 'script', 'span', 'sub', 'sup', 'button', 'label', 'input', 'select', 'textarea', 'param', 'hr'];

var isNotEmptyString = function isNotEmptyString(string) {
  return (/\S/.test(string)
  );
};

var trimFirstSpaces = function trimFirstSpaces(string) {
  return string.replace(/^\s+/g, '');
};

var addLevelTag = function addLevelTag(levelTags, tagName) {
  return [].concat(_toConsumableArray(levelTags), [tagName]);
};

var deleteLevelTag = function deleteLevelTag(levelTags, tagName) {
  return levelTags.filter(function (levelTag) {
    return levelTag != tagName;
  });
};

var getNodeType = function getNodeType(str) {
  if (str.slice(0, 4) == '<!--') return 'comment';
  return str[0] == '<' && str[str.length - 1] == '>' ? 'tag' : 'text';
};

var getTagType = function getTagType(str) {
  if (str[1] == '/') return 'closed';
  if (str.slice(-2) == '/>') return 'single';
  return 'opened';
};

var getFormattedNode = function getFormattedNode(_ref) {
  var node = _ref.node,
      spaceCount = _ref.spaceCount,
      newLine = _ref.newLine;

  if (spaceCount < 0) spaceCount = 0;
  return NEW_LINE.repeat(newLine + 0) + SPACE.repeat(spaceCount) + node;
};

var getTagName = function getTagName(str, type) {
  var tag = false;
  switch (type) {
    case 'closed':
      tag = str.slice(2, -1);
      break;
    case 'opened':
      tag = str.slice(1, -1);
      break;
    case 'single':
      tag = str.slice(1, -2);
      break;
  }
  return tag.split(' ')[0];
};

var getTagInfo = function getTagInfo(_ref2) {
  var node = _ref2.node,
      nodeType = _ref2.nodeType;
      _ref2.inlineTags;

  if (nodeType != 'tag') return {};
  var tagType = getTagType(node);
  var tagName = getTagName(node, tagType);
  var tagIsInline = INLINE_TAGS.indexOf(tagName) > -1 ? true : false;
  return { tagType: tagType, tagName: tagName, tagIsInline: tagIsInline };
};

var isNewLineNode = function isNewLineNode(_ref3) {
  var nodeType = _ref3.nodeType,
      previousNodeType = _ref3.previousNodeType,
      previousTagIsInline = _ref3.previousTagIsInline,
      previousTagType = _ref3.previousTagType,
      tagInfo = _ref3.tagInfo;
  var tagIsInline = tagInfo.tagIsInline,
      tagType = tagInfo.tagType;

  if (nodeType == 'comment') {
    return true;
  }

  if (tagType == 'opened' && !tagIsInline && previousNodeType != false) return true;

  if (tagType == 'closed' && !tagIsInline && (previousTagIsInline || previousNodeType != 'tag' || previousTagType == 'closed' && !previousTagIsInline)) return true;

  if (tagIsInline && nodeType == 'tag' && (previousNodeType == 'tag' && !previousTagIsInline || previousNodeType == 'comment')) return true;

  if (nodeType == 'text' && ['tag', 'comment'].indexOf(previousNodeType) > -1 && !previousTagIsInline) return true;

  return false;
};

var getNewLineSpacesCount = function getNewLineSpacesCount(_ref4) {
  var nodeType = _ref4.nodeType,
      tagInfo = _ref4.tagInfo;
      _ref4.tagIsInline;
      var previousNodeType = _ref4.previousNodeType,
      previousTagIsInline = _ref4.previousTagIsInline,
      previousTagType = _ref4.previousTagType,
      level = _ref4.level;

  if (nodeType == 'tag') {
    var _tagIsInline = tagInfo.tagIsInline,
        tagType = tagInfo.tagType;


    if (_tagIsInline && (previousNodeType == 'tag' && previousTagIsInline == false || previousNodeType == 'comment')) return level + 1;

    if (_tagIsInline && previousNodeType == 'text' || _tagIsInline && previousNodeType == 'tag' && previousTagIsInline) return 0;

    if (tagType == 'closed' && previousNodeType == 'tag' && !previousTagIsInline) return 0;

    return level;
  }
  if (nodeType == 'text') {
    if (['tag', 'comment'].indexOf(previousNodeType) > -1 && !previousTagIsInline && previousTagType == 'opened') {
      return level + 1;
    } else {
      return 0;
    }
  }
  if (nodeType == 'comment') {
    if (previousNodeType == false) {
      return level;
    } else {
      return level + 1;
    }
  }
};

var beautify = function beautify(html) {

  var beautified = '';

  var node = '';
  var level = 0;
  var levelTags = [];
  var previousNodeType = '';
  var previousTagIsInline = false;
  var previousTagType = false;

  var symbols = html.split('');
  var index = 0;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = symbols[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var symbol = _step.value;

      node += symbol;

      var previousSymbol = index > 0 ? symbols[index - 1] : false;

      var nextSymbol = symbols.length - 1 != index ? symbols[index + 1] : false;

      if (html.length == index + 1 || nextSymbol == '<' || symbol == '>') {
        node = node.replace(/\n/g, '');

        var nodeType = getNodeType(node);

        var tagInfo = getTagInfo({ node: node, nodeType: nodeType });

        if (nodeType == 'tag' && SINGLETON_TAGS.indexOf(tagInfo.tagName) == -1) {
          var tagIsInline = tagInfo.tagIsInline,
              tagType = tagInfo.tagType,
              tagName = tagInfo.tagName;

          if (!tagIsInline && tagType == 'opened') levelTags = addLevelTag(levelTags, tagName);
          level = levelTags.length - 1;
          if (!tagIsInline && tagType == 'closed') levelTags = deleteLevelTag(levelTags, tagName);
        }

        if (previousNodeType == 'tag' && !previousTagIsInline) if (tagInfo.tagIsInline || nodeType == 'text') node = trimFirstSpaces(node);

        var newLine = isNewLineNode({
          nodeType: nodeType,
          tagInfo: tagInfo,
          previousNodeType: previousNodeType,
          previousTagIsInline: previousTagIsInline,
          previousTagType: previousTagType
        });

        var spaceCount = getNewLineSpacesCount({
          level: level,
          nodeType: nodeType,
          tagInfo: tagInfo,
          previousNodeType: previousNodeType,
          previousTagIsInline: previousTagIsInline,
          previousTagType: previousTagType
        });

        var nodeInfo = _extends({
          level: level,
          node: node,
          nodeType: nodeType,
          newLine: newLine,
          spaceCount: spaceCount,
          previousTagType: previousTagType,
          previousTagIsInline: previousTagIsInline,
          previousNodeType: previousNodeType
        }, tagInfo);

        if (isNotEmptyString(node)) {
          beautified += getFormattedNode({
            node: node,
            spaceCount: nodeInfo.spaceCount,
            newLine: nodeInfo.newLine
          });
        }

        if (isNotEmptyString(node)) {
          previousNodeType = nodeType;
          if (nodeType == 'tag') {
            previousTagType = nodeInfo.tagType;
            previousTagIsInline = nodeInfo.tagIsInline;
          }
        }
        node = '';
      }
      index++;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return beautified;
};
module.exports = exports['default'];
}(htmlBeautify, htmlBeautify.exports));

(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _htmlBeautify = htmlBeautify.exports;

var _htmlBeautify2 = _interopRequireDefault(_htmlBeautify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _htmlBeautify2.default;
module.exports = exports['default'];
}(dist, dist.exports));

var html_beautify = /*@__PURE__*/getDefaultExportFromCjs(dist.exports);

var formatHtml = function (html) {
    html = html_beautify(html, {});
    return html.replace(/\n(\n)*( )*(\n)*\n/g, '\n');
};

var jsonp2Obj = function (jsonp) {
    if (!isJsonp(jsonp)) {
        return jsonp;
    }
    var pattern = /([\s\S]*?)\(([\s\S]*?)\)([\s\S]*?)/;
    var Res = jsonp.match(pattern);
    if (isJson(Res && Res[2])) {
        return ["".concat(Res[1], "("), Res[2], ")".concat(Res[3])];
    }
    else {
        return jsonp;
    }
};

// 成功结果对象
var successResult = function (data) {
    return {
        status: 'success',
        data: data
    };
};

// 失败结果对象
var errorResult = function (message) {
    return {
        status: 'error',
        message: message
    };
};

var jsonBigint = {exports: {}};

var stringify = {exports: {}};

(function (module) {
var BigNumber = require$$0__default["default"];

/*
    json2.js
    2013-05-26

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

var JSON = module.exports;

(function () {

    var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key],
            isBigNumber = value != null && (value instanceof BigNumber || BigNumber.isBigNumber(value));

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            if (isBigNumber) {
                return value;
            } else {
                return quote(value);
            }

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':
        case 'bigint':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                Object.keys(value).forEach(function(k) {
                    var v = str(k, value);
                    if (v) {
                        partial.push(quote(k) + (gap ? ': ' : ':') + v);
                    }
                });
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }
}());
}(stringify));

var BigNumber = null;

// regexpxs extracted from
// (c) BSD-3-Clause
// https://github.com/fastify/secure-json-parse/graphs/contributors and https://github.com/hapijs/bourne/graphs/contributors

const suspectProtoRx = /(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/;
const suspectConstructorRx = /(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;

/*
    json_parse.js
    2012-06-20

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    This file creates a json_parse function.
    During create you can (optionally) specify some behavioural switches

        require('json-bigint')(options)

            The optional options parameter holds switches that drive certain
            aspects of the parsing process:
            * options.strict = true will warn about duplicate-key usage in the json.
              The default (strict = false) will silently ignore those and overwrite
              values for keys that are in duplicate use.

    The resulting function follows this signature:
        json_parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = json_parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

    This is a reference implementation. You are free to copy, modify, or
    redistribute.

    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.
*/

/*members "", "\"", "\/", "\\", at, b, call, charAt, f, fromCharCode,
    hasOwnProperty, message, n, name, prototype, push, r, t, text
*/

var json_parse$1 = function (options) {

  // This is a function that can parse a JSON text, producing a JavaScript
  // data structure. It is a simple, recursive descent parser. It does not use
  // eval or regular expressions, so it can be used as a model for implementing
  // a JSON parser in other languages.

  // We are defining the function inside of another function to avoid creating
  // global variables.

  // Default options one can override by passing options to the parse()
  var _options = {
    strict: false, // not being strict means do not generate syntax errors for "duplicate key"
    storeAsString: false, // toggles whether the values should be stored as BigNumber (default) or a string
    alwaysParseAsBig: false, // toggles whether all numbers should be Big
    useNativeBigInt: false, // toggles whether to use native BigInt instead of bignumber.js
    protoAction: 'error',
    constructorAction: 'error',
  };

  // If there are options, then use them to override the default _options
  if (options !== undefined && options !== null) {
    if (options.strict === true) {
      _options.strict = true;
    }
    if (options.storeAsString === true) {
      _options.storeAsString = true;
    }
    _options.alwaysParseAsBig =
      options.alwaysParseAsBig === true ? options.alwaysParseAsBig : false;
    _options.useNativeBigInt =
      options.useNativeBigInt === true ? options.useNativeBigInt : false;

    if (typeof options.constructorAction !== 'undefined') {
      if (
        options.constructorAction === 'error' ||
        options.constructorAction === 'ignore' ||
        options.constructorAction === 'preserve'
      ) {
        _options.constructorAction = options.constructorAction;
      } else {
        throw new Error(
          `Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${options.constructorAction}`
        );
      }
    }

    if (typeof options.protoAction !== 'undefined') {
      if (
        options.protoAction === 'error' ||
        options.protoAction === 'ignore' ||
        options.protoAction === 'preserve'
      ) {
        _options.protoAction = options.protoAction;
      } else {
        throw new Error(
          `Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${options.protoAction}`
        );
      }
    }
  }

  var at, // The index of the current character
    ch, // The current character
    escapee = {
      '"': '"',
      '\\': '\\',
      '/': '/',
      b: '\b',
      f: '\f',
      n: '\n',
      r: '\r',
      t: '\t',
    },
    text,
    error = function (m) {
      // Call error when something is wrong.

      throw {
        name: 'SyntaxError',
        message: m,
        at: at,
        text: text,
      };
    },
    next = function (c) {
      // If a c parameter is provided, verify that it matches the current character.

      if (c && c !== ch) {
        error("Expected '" + c + "' instead of '" + ch + "'");
      }

      // Get the next character. When there are no more characters,
      // return the empty string.

      ch = text.charAt(at);
      at += 1;
      return ch;
    },
    number = function () {
      // Parse a number value.

      var number,
        string = '';

      if (ch === '-') {
        string = '-';
        next('-');
      }
      while (ch >= '0' && ch <= '9') {
        string += ch;
        next();
      }
      if (ch === '.') {
        string += '.';
        while (next() && ch >= '0' && ch <= '9') {
          string += ch;
        }
      }
      if (ch === 'e' || ch === 'E') {
        string += ch;
        next();
        if (ch === '-' || ch === '+') {
          string += ch;
          next();
        }
        while (ch >= '0' && ch <= '9') {
          string += ch;
          next();
        }
      }
      number = +string;
      if (!isFinite(number)) {
        error('Bad number');
      } else {
        if (BigNumber == null) BigNumber = require$$0__default["default"];
        //if (number > 9007199254740992 || number < -9007199254740992)
        // Bignumber has stricter check: everything with length > 15 digits disallowed
        if (string.length > 15)
          return _options.storeAsString
            ? string
            : _options.useNativeBigInt
            ? BigInt(string)
            : new BigNumber(string);
        else
          return !_options.alwaysParseAsBig
            ? number
            : _options.useNativeBigInt
            ? BigInt(number)
            : new BigNumber(number);
      }
    },
    string = function () {
      // Parse a string value.

      var hex,
        i,
        string = '',
        uffff;

      // When parsing for string values, we must look for " and \ characters.

      if (ch === '"') {
        var startAt = at;
        while (next()) {
          if (ch === '"') {
            if (at - 1 > startAt) string += text.substring(startAt, at - 1);
            next();
            return string;
          }
          if (ch === '\\') {
            if (at - 1 > startAt) string += text.substring(startAt, at - 1);
            next();
            if (ch === 'u') {
              uffff = 0;
              for (i = 0; i < 4; i += 1) {
                hex = parseInt(next(), 16);
                if (!isFinite(hex)) {
                  break;
                }
                uffff = uffff * 16 + hex;
              }
              string += String.fromCharCode(uffff);
            } else if (typeof escapee[ch] === 'string') {
              string += escapee[ch];
            } else {
              break;
            }
            startAt = at;
          }
        }
      }
      error('Bad string');
    },
    white = function () {
      // Skip whitespace.

      while (ch && ch <= ' ') {
        next();
      }
    },
    word = function () {
      // true, false, or null.

      switch (ch) {
        case 't':
          next('t');
          next('r');
          next('u');
          next('e');
          return true;
        case 'f':
          next('f');
          next('a');
          next('l');
          next('s');
          next('e');
          return false;
        case 'n':
          next('n');
          next('u');
          next('l');
          next('l');
          return null;
      }
      error("Unexpected '" + ch + "'");
    },
    value, // Place holder for the value function.
    array = function () {
      // Parse an array value.

      var array = [];

      if (ch === '[') {
        next('[');
        white();
        if (ch === ']') {
          next(']');
          return array; // empty array
        }
        while (ch) {
          array.push(value());
          white();
          if (ch === ']') {
            next(']');
            return array;
          }
          next(',');
          white();
        }
      }
      error('Bad array');
    },
    object = function () {
      // Parse an object value.

      var key,
        object = Object.create(null);

      if (ch === '{') {
        next('{');
        white();
        if (ch === '}') {
          next('}');
          return object; // empty object
        }
        while (ch) {
          key = string();
          white();
          next(':');
          if (
            _options.strict === true &&
            Object.hasOwnProperty.call(object, key)
          ) {
            error('Duplicate key "' + key + '"');
          }

          if (suspectProtoRx.test(key) === true) {
            if (_options.protoAction === 'error') {
              error('Object contains forbidden prototype property');
            } else if (_options.protoAction === 'ignore') {
              value();
            } else {
              object[key] = value();
            }
          } else if (suspectConstructorRx.test(key) === true) {
            if (_options.constructorAction === 'error') {
              error('Object contains forbidden constructor property');
            } else if (_options.constructorAction === 'ignore') {
              value();
            } else {
              object[key] = value();
            }
          } else {
            object[key] = value();
          }

          white();
          if (ch === '}') {
            next('}');
            return object;
          }
          next(',');
          white();
        }
      }
      error('Bad object');
    };

  value = function () {
    // Parse a JSON value. It could be an object, an array, a string, a number,
    // or a word.

    white();
    switch (ch) {
      case '{':
        return object();
      case '[':
        return array();
      case '"':
        return string();
      case '-':
        return number();
      default:
        return ch >= '0' && ch <= '9' ? number() : word();
    }
  };

  // Return the json_parse function. It will have access to all of the above
  // functions and variables.

  return function (source, reviver) {
    var result;

    text = source + '';
    at = 0;
    ch = ' ';
    result = value();
    white();
    if (ch) {
      error('Syntax error');
    }

    // If there is a reviver function, we recursively walk the new structure,
    // passing each name/value pair to the reviver function for possible
    // transformation, starting with a temporary root object that holds the result
    // in an empty key. If there is not a reviver function, we simply return the
    // result.

    return typeof reviver === 'function'
      ? (function walk(holder, key) {
          var v,
            value = holder[key];
          if (value && typeof value === 'object') {
            Object.keys(value).forEach(function (k) {
              v = walk(value, k);
              if (v !== undefined) {
                value[k] = v;
              } else {
                delete value[k];
              }
            });
          }
          return reviver.call(holder, key, value);
        })({ '': result }, '')
      : result;
  };
};

var parse = json_parse$1;

var json_stringify = stringify.exports.stringify;
var json_parse     = parse;

jsonBigint.exports = function(options) {
    return  {
        parse: json_parse(options),
        stringify: json_stringify
    }
};
//create the default method members with no options applied for backwards compatibility
jsonBigint.exports.parse = json_parse();
jsonBigint.exports.stringify = json_stringify;

var JSONbig = jsonBigint.exports;

var JSONBigInt = JSONbig({
    useNativeBigInt: true
});
function mayContain64BitInt(jsonStr) {
    // 匹配可能超过 53 位精度的数字
    // ±[9-9]{16,} 匹配 16 位及以上的数字
    // 2^53 = 9007199254740992
    var regex = /-?\d{16,}(?:\.\d*)?(?:[eE][+-]?\d+)?/;
    return regex.test(jsonStr);
}
var jsonOption = function (a, b) {
    try {
        if (lodash.isNumber(b) && !Number.isSafeInteger(b)) {
            return BigInt(b);
        }
    }
    catch (e) {
        return b;
    }
    return b;
};
var beautifyRaw = function (data) {
    var beautifyRaw = '';
    var mode = 'text';
    if (Object.prototype.toString.call(data) === '[object Object]') {
        // 传入数据为对象
        try {
            beautifyRaw = JSONbig.stringify(data, null, '\t');
        }
        catch (error) {
            beautifyRaw = JSON.stringify(data, null, '\t');
        }
        mode = 'json';
    }
    else if (Object.prototype.toString.call(data) === '[object String]') {
        // 传入数据为字符串
        var isNextCheck = true;
        if (mayContain64BitInt(data)) {
            //可能有64位整数
            try {
                var stripData = jsoncParser.stripComments(data); //通过语法去除注释，防止无法解析
                beautifyRaw = JSONBigInt.stringify(JSONBigInt.parse(stripData), null, '\t');
                mode = 'json';
                isNextCheck = false;
            }
            catch (error) {
                isNextCheck = true;
            }
        }
        if (!isNextCheck) ;
        else if (isJson5(data)) {
            try {
                beautifyRaw = JSONbig.stringify(JSON5__default["default"].parse(data, jsonOption), null, '\t');
            }
            catch (error) {
                beautifyRaw = JSONbig.stringify(JSON.parse(data, jsonOption), null, '\t');
            }
            mode = 'json';
        }
        else if (isJson(data)) {
            try {
                beautifyRaw = JSONbig.stringify(JSONbig.parse(data), null, '\t');
            }
            catch (error) {
                beautifyRaw = JSONbig.stringify(JSON.parse(data), null, '\t');
            }
            mode = 'json';
        }
        else if (isXml(data)) {
            beautifyRaw = formatXml(data);
            mode = 'xml';
        }
        else if (isHtml(data)) {
            beautifyRaw = formatHtml(data);
            mode = 'html';
        }
        else if (isJsonp(data)) {
            var _obj = jsonp2Obj(data);
            try {
                beautifyRaw = _obj[0] + JSONbig.stringify(JSONbig.parse(_obj[1]), null, '\t') + _obj[2];
            }
            catch (error) {
                try {
                    beautifyRaw = _obj[0] + JSON.stringify(JSON.parse(_obj[1]), null, '\t') + _obj[2];
                }
                catch (error) {
                    console.log(error, 'Failed to beautify JSONP');
                }
            }
            mode = 'json';
        }
        else {
            try {
                // eval(data);
                eval("(function sandbox(){ ".concat(data, " })"));
                mode = 'javascript';
            }
            catch (error) {
                mode = 'text';
            }
            beautifyRaw = data;
        }
    }
    else {
        beautifyRaw = String(data);
    }
    return {
        mode: mode,
        value: beautifyRaw,
    };
};

var Buffer = require('buffer/').Buffer, pako = require('pako');
var bufferToRaw = function (buffer, mime) {
    var _inflateBuffer = null;
    try {
        _inflateBuffer = Buffer.from(pako.inflate(Buffer.from(buffer)));
    }
    catch (e) {
        _inflateBuffer = Buffer.from(buffer);
    }
    return {
        buffer: _inflateBuffer,
        raw: _inflateBuffer.toString(),
        base64: "data:".concat(mime['mime'], ";base64,").concat(_inflateBuffer.toString('base64'))
    };
};

var completionHttpProtocol = function (data) {
    if (Object.prototype.toString.call(data) === '[object String]') {
        if (data.toLowerCase().substr(0, 7).toLowerCase() !== 'http://' &&
            data.toLowerCase().substr(0, 8).toLowerCase() !== 'https://') {
            data = "http://".concat(data);
        }
    }
    else if (Object.prototype.toString.call(data) === '[object Object]' && data.hasOwnProperty('url')) {
        if (Object.prototype.toString.call(data === null || data === void 0 ? void 0 : data.url) === '[object String]') {
            if (data.url.toLowerCase().substr(0, 7).toLowerCase() !== 'http://' &&
                data.url.toLowerCase().substr(0, 8).toLowerCase() !== 'https://') {
                data.url = "http://".concat(data.url);
            }
        }
    }
    return data;
};

/**
 * 根据url生成URL 对象
 */
var NewURL = function (_url) {
    if (Object.prototype.toString.call(_url) !== '[object String]') {
        _url = '';
    }
    //补全http协议前缀
    _url = completionHttpProtocol(_url);
    var hostReg = /(http([s]?):\/\/)([^\/\?\\#]*)([\/|\?|\\#]?)/i;
    var host_arr = _url.match(hostReg) || [];
    var protocol = host_arr[1];
    var host = host_arr[3];
    // 主域部分
    var origin = protocol + host;
    // 剩下部分
    _url = "https://www.apipost.cn".concat(_url.substring(origin.length));
    var urls = {};
    try {
        urls = new URL(_url);
    }
    catch (_a) {
        var http_url = "https://www.apipost.cn".concat(_url.substring(origin.length));
        var a = document.createElement('a');
        a.href = http_url;
        urls = {
            source: _url,
            href: a.href,
            protocol: a.protocol,
            host: a.hostname,
            hostname: a.hostname,
            port: a.port,
            origin: a.origin,
            search: a.search,
            pathname: a.pathname,
            file: (a.pathname.match(/\/([^\/?#]+)$/i) || ['', ''])[1],
            hash: a.hash,
        };
    }
    return urls;
};

// 成功结果对象
var setObjValByPath = function (obj, val, path) {
    if (Object.prototype.toString.call(path) != '[object String]') {
        return;
    }
    if (Object.prototype.toString.call(obj) != '[object Object]') {
        return;
    }
    var arr = path.split('.');
    arr.reduce(function (acc, cur, i) {
        return (acc[cur] = i === arr.length - 1 ? val : acc[cur] || {});
    }, obj);
};

/**
 * 雪花算法生成唯一ID
 */
/**
 * 生成 Snowflake ID
 * @param seed - 用于生成 Snowflake ID 的种子字符串,如果为空，自动生成。建议使用项目id
 * @param base - hash范围，2或16，2进制或16进制
 * @returns 以2进制或16进制表示的64位ID
 */
var snowflakeId = function (seed, base) {
    if (seed === void 0) { seed = ""; }
    if (base === void 0) { base = 16; }
    //base 支持2,16 需要验证
    base = (base === 2 || base === 16) ? base : 16;
    seed = seed || genSeed();
    if (typeof seed !== 'string') {
        seed = seed + ""; //强制转字符串
    }
    var sequence = next_id(); //一直自增id
    var timestamp = new Date().getTime() - 1671537188000; //和后端约定时间戳起始时间,2022-12-20
    if (sequence > 4095) {
        sequence = sequence % 4095; //12位序列号
    }
    // 64位ID的划分
    // 0 - 41位时间戳 - 12位序列号 - 10位机器标识 - 12位序号
    var binstring = '0' + leftpad(dec2bin(timestamp), 41) + "1" + simpleHash(seed) + leftpad(dec2bin(sequence), 12);
    if (base === 2) {
        return binstring;
    }
    else {
        var chunks = splitN(binstring, 4);
        var binHexMap_1 = { "0000": "0", "0001": "1", "0010": "2", "0011": "3", "0100": "4", "0101": "5", "0110": "6", "0111": "7", "1000": "8", "1001": "9", "1010": "a", "1011": "b", "1100": "c", "1101": "d", "1110": "e", "1111": "f" };
        //用map转换chunks
        var hexChunks = chunks.map(function (item) {
            return binHexMap_1[item];
        });
        //返回16进制
        return hexChunks.join("").replace(/^0+/, '');
    }
    //10进制转2进制
    function dec2bin(dec) {
        return (dec >>> 0).toString(2);
    }
    //左边补0
    function leftpad(str, len) {
        str = str + '';
        len = len - str.length;
        if (len <= 0) {
            return str;
        }
        return Array(len + 1).join('0') + str;
    }
    //右边补0
    function rightpad(str, len) {
        str = str + '';
        len = len - str.length;
        if (len <= 0) {
            return str;
        }
        return str + Array(len + 1).join('0');
    }
    //9位hash
    function simpleHash(str) {
        var hash = 0;
        for (var i = 0; i < str.length; i++) {
            hash = (hash << 5) - hash + str.charCodeAt(i);
        }
        var strhash = rightpad(dec2bin(hash), 9);
        if (strhash.length > 9) {
            strhash = strhash.substring(0, 9);
        }
        return strhash;
    }
    //gen seed
    function genSeed() {
        var seed = "";
        try {
            //默认使用进程id
            //@ts-ignore
            if (typeof process === 'object' && process + '' === '[object process]') {
                //@ts-ignore
                seed = process.pid + "";
            }
            else if (typeof window === 'object' && window.navigator && window.navigator.userAgent) {
                seed = window.navigator.userAgent + window.navigator.language + window.screen.colorDepth + window.screen.width + window.screen.height;
            }
        }
        catch (e) { }
        //如果为空，生成32位随机字符串
        if (!seed) {
            var str = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            for (var i = 0; i < 32; i++) {
                seed += str.charAt(Math.floor(Math.random() * str.length));
            }
        }
        return seed;
    }
    //切分字符串
    function splitN(inputString, chunkSize) {
        var chunks = [];
        for (var i = 0; i < inputString.length; i += chunkSize) {
            chunks.push(inputString.substring(i, i + chunkSize));
        }
        return chunks;
    }
};
var generateIncrementalFunction = function () {
    var counter = 0;
    return function () {
        return counter++;
    };
};
//生成唯一id
var next_id = generateIncrementalFunction();

var index = {
    isJson: isJson,
    isJsonp: isJsonp,
    isJson5: isJson5,
    isEmail: isEmail,
    getUrlQuery: getUrlQuery,
    getUrlQueryArray: getUrlQueryArray,
    array2Tree: array2Tree,
    isHtml: isHtml,
    ms2second: ms2second,
    isXml: isXml,
    formatXml: formatXml,
    formatHtml: formatHtml,
    jsonp2Obj: jsonp2Obj,
    successResult: successResult,
    errorResult: errorResult,
    beautifyRaw: beautifyRaw,
    bufferToRaw: bufferToRaw,
    completionHttpProtocol: completionHttpProtocol,
    NewURL: NewURL,
    setObjValByPath: setObjValByPath,
    snowflakeId: snowflakeId,
};

exports.NewURL = NewURL;
exports.array2Tree = array2Tree;
exports.beautifyRaw = beautifyRaw;
exports.bufferToRaw = bufferToRaw;
exports.completionHttpProtocol = completionHttpProtocol;
exports["default"] = index;
exports.errorResult = errorResult;
exports.formatHtml = formatHtml;
exports.formatXml = formatXml;
exports.getUrlQuery = getUrlQuery;
exports.getUrlQueryArray = getUrlQueryArray;
exports.isEmail = isEmail;
exports.isHtml = isHtml;
exports.isJson = isJson;
exports.isJson5 = isJson5;
exports.isJsonp = isJsonp;
exports.isXml = isXml;
exports.jsonp2Obj = jsonp2Obj;
exports.ms2second = ms2second;
exports.setObjValByPath = setObjValByPath;
exports.snowflakeId = snowflakeId;
exports.successResult = successResult;
