declare const isJson: (str: string) => boolean;

declare const isJsonp: (jsonp: string) => boolean;

declare const isJson5: (str: string) => boolean;

declare const isEmail: (str: string) => boolean;

declare const getUrlQuery: (url: string) => object;

declare const getUrlQueryArray: (url: string) => any[];

declare const array2Tree: (items: any[], idName?: string, pidName?: string) => any[];

declare const isHtml: (html: string) => boolean;

declare const ms2second: (time: string) => number;

declare var isXml: (val: any) => any;

declare const formatXml: (xmlStr: string) => string;

declare const formatHtml: (html: any) => any;

declare const jsonp2Obj: (jsonp: any) => any;

declare const successResult: (data: any) => {
    status: string;
    data: any;
};

declare const errorResult: (message: string) => {
    status: string;
    message: string;
};

declare const beautifyRaw: (data: any) => {
    mode: string;
    value: string;
};

declare const bufferToRaw: (buffer: any, mime: any) => {
    buffer: any;
    raw: any;
    base64: string;
};

declare const completionHttpProtocol: (data: any) => any;

/**
 * 根据url生成URL 对象
 */
declare const NewURL: (_url: string) => {};

declare const setObjValByPath: (obj: any, val: any, path: String) => void;

/**
 * 雪花算法生成唯一ID
 */
/**
 * 生成 Snowflake ID
 * @param seed - 用于生成 Snowflake ID 的种子字符串,如果为空，自动生成。建议使用项目id
 * @param base - hash范围，2或16，2进制或16进制
 * @returns 以2进制或16进制表示的64位ID
 */
declare const snowflakeId: (seed?: string, base?: number) => string;

declare const _default: {
    isJson: (str: string) => boolean;
    isJsonp: (jsonp: string) => boolean;
    isJson5: (str: string) => boolean;
    isEmail: (str: string) => boolean;
    getUrlQuery: (url: string) => object;
    getUrlQueryArray: (url: string) => any[];
    array2Tree: (items: any[], idName?: string, pidName?: string) => any[];
    isHtml: (html: string) => boolean;
    ms2second: (time: string) => number;
    isXml: (val: any) => any;
    formatXml: (xmlStr: string) => string;
    formatHtml: (html: any) => any;
    jsonp2Obj: (jsonp: any) => any;
    successResult: (data: any) => {
        status: string;
        data: any;
    };
    errorResult: (message: string) => {
        status: string;
        message: string;
    };
    beautifyRaw: (data: any) => {
        mode: string;
        value: string;
    };
    bufferToRaw: (buffer: any, mime: any) => {
        buffer: any;
        raw: any;
        base64: string;
    };
    completionHttpProtocol: (data: any) => any;
    NewURL: (_url: string) => {};
    setObjValByPath: (obj: any, val: any, path: String) => void;
    snowflakeId: (seed?: string, base?: number) => string;
};

export { NewURL, array2Tree, beautifyRaw, bufferToRaw, completionHttpProtocol, _default as default, errorResult, formatHtml, formatXml, getUrlQuery, getUrlQueryArray, isEmail, isHtml, isJson, isJson5, isJsonp, isXml, jsonp2Obj, ms2second, setObjValByPath, snowflakeId, successResult };
